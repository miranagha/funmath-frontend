[{"/Users/user/Desktop/funmath-frontend/src/index.js":"1","/Users/user/Desktop/funmath-frontend/src/App.js":"2","/Users/user/Desktop/funmath-frontend/src/Login.js":"3","/Users/user/Desktop/funmath-frontend/src/signup.js":"4","/Users/user/Desktop/funmath-frontend/src/home.js":"5","/Users/user/Desktop/funmath-frontend/src/reducers/index.js":"6","/Users/user/Desktop/funmath-frontend/src/actions/auth.js":"7","/Users/user/Desktop/funmath-frontend/src/games/game1.js":"8","/Users/user/Desktop/funmath-frontend/src/games/game5.js":"9","/Users/user/Desktop/funmath-frontend/src/games/game2.js":"10","/Users/user/Desktop/funmath-frontend/src/games/game4.js":"11","/Users/user/Desktop/funmath-frontend/src/games/game3.js":"12","/Users/user/Desktop/funmath-frontend/src/games/game7.js":"13","/Users/user/Desktop/funmath-frontend/src/games/game6.js":"14","/Users/user/Desktop/funmath-frontend/src/games/game9.js":"15","/Users/user/Desktop/funmath-frontend/src/games/game8.js":"16","/Users/user/Desktop/funmath-frontend/src/reducers/user.js":"17","/Users/user/Desktop/funmath-frontend/src/constants/index.js":"18"},{"size":283,"mtime":1628774038000,"results":"19","hashOfConfig":"20"},{"size":867,"mtime":1629213082000,"results":"21","hashOfConfig":"20"},{"size":3904,"mtime":1629333736000,"results":"22","hashOfConfig":"20"},{"size":4517,"mtime":1629333918000,"results":"23","hashOfConfig":"20"},{"size":2964,"mtime":1629321102000,"results":"24","hashOfConfig":"20"},{"size":161,"mtime":1629060236000,"results":"25","hashOfConfig":"20"},{"size":523,"mtime":1629065058000,"results":"26","hashOfConfig":"20"},{"size":8118,"mtime":1629335534912,"results":"27","hashOfConfig":"20"},{"size":15051,"mtime":1629335549605,"results":"28","hashOfConfig":"20"},{"size":12349,"mtime":1629335522790,"results":"29","hashOfConfig":"20"},{"size":11838,"mtime":1629335464810,"results":"30","hashOfConfig":"20"},{"size":11832,"mtime":1629335528218,"results":"31","hashOfConfig":"20"},{"size":14386,"mtime":1629330748000,"results":"32","hashOfConfig":"20"},{"size":15261,"mtime":1629330710000,"results":"33","hashOfConfig":"20"},{"size":10474,"mtime":1629330816000,"results":"34","hashOfConfig":"20"},{"size":12371,"mtime":1629330786000,"results":"35","hashOfConfig":"20"},{"size":467,"mtime":1629405299604,"results":"36","hashOfConfig":"20"},{"size":178,"mtime":1629390011744,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"t9yh9t",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":3,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":6,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":9,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":4,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":5,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":6,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/user/Desktop/funmath-frontend/src/index.js",["86","87"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n  <App />\r\n</BrowserRouter>\r\n, document.getElementById('root')\r\n);\r\n","/Users/user/Desktop/funmath-frontend/src/App.js",[],"/Users/user/Desktop/funmath-frontend/src/Login.js",["88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"import React, { Component,useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport {Form, Button, Container, Card, Col, Row} from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\nimport {signin} from './actions/auth'\r\nimport logo from './logo22.jpeg'\r\n\r\n\r\nimport {useDispatch,connect} from 'react-redux'\r\nimport axios from 'axios';\r\n\r\n  const Login=(props)=>{ \r\n\r\n    const [nickname,setNickname]=useState('')\r\n    const [password,setPassword]=useState('')\r\n    const [logined,setLogin]=useState(false)\r\n    \r\n    const [error,seterror]=useState(false)\r\n    \r\n    const [errorS,seterrorMessage]=useState('')\r\n   const handlesubmit=async(e)=>{\r\n        e.preventDefault();\r\n     //  this.props.signin (this.state.nickname)\r\n     const config = {\r\n        headers: {\r\n            \"X-Requested-With\": \"XMLHttpRequest\"\r\n        }\r\n      }\r\n      if(nickname ==''){\r\n        seterror(true)\r\n        seterrorMessage('Nickname is required')   \r\n        return  \r\n    }\r\n      if(password===''){\r\n            \r\n        seterror(true)\r\n        seterrorMessage('Password is required')     \r\n        return\r\n    }else{\r\n        \r\n        seterror(false)\r\n        seterrorMessage('')  \r\n    }\r\n    await axios.post('https://frozen-island-11321.herokuapp.com/https://testcccvd.herokuapp.com/login'\r\n     ,{\r\n        'nickname': nickname\r\n     }, config)\r\n\r\n     .then(async function(response) {\r\n         console.log(response)\r\n        if(response.statusText==='OK'){\r\n           \r\n    props.history.push('/home')\r\n    }\r\n        else if(response.status===201){\r\n            \r\n        seterror(true)\r\n        seterrorMessage('No User with this nickname exits') \r\n        }\r\n\r\n         \r\n\t}).catch(function(e){\r\n        \r\n        seterror(true)\r\n        seterrorMessage(e) \r\n\t \tconsole.log(e);\r\n\t});\r\n \r\n\t \t \r\n     \r\n     // this.props.history.push('/home') \r\n       }\r\n      const nicknamehandler = event =>{\r\n         setNickname( event.target.value)\r\n    }\r\n   const passwordhandler = (event) =>{\r\n    setPassword( event.target.value)\r\n    }  \r\n        return (\r\n            <div className=\"formcontainer modal-dialog-centered\">\r\n              \r\n              <div>\r\n                <img className=\"logo\" src={logo} alt=\"logo\"/>\r\n                </div>  <div className=\"formarea rounded-lg shadow-lg\">\r\n                \r\n                    <Form className=\"form\" onSubmit={handlesubmit}> \r\n                        <h3 className=\"align-items-center text-primary text-danger mb-3 p-3 text-center\">Login</h3>\r\n                      \r\n                        {\r\n                    error?<p style={{\r\n                        color:'red'\r\n                    }}>{errorS}</p>:<p></p>\r\n                    }\r\n                        <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                            <Form.Label>Nickname:</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"jerry\" value={nickname} onChange={nicknamehandler} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"mb-2\" controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password:</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" value={password} onChange={passwordhandler}/>\r\n                        </Form.Group>\r\n                        \r\n                        <Button className=\" mt-2 btn-block bg-danger w-100\" type=\"submit\">\r\n                            Login\r\n                        </Button>\r\n                        <div className=\"text-center m-sm-3\">\r\n                            Create a new Account <Link to=\"/signup\">Sign up</Link>\r\n                            </div> \r\n                    </Form>\r\n                </div>\r\n          </div>\r\n        );\r\n    }\r\n\r\n\r\n \r\n\r\nexport default  Login;","/Users/user/Desktop/funmath-frontend/src/signup.js",["102","103","104","105","106","107","108","109","110"],"import React, { Component,useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport {Form, Button, Container, Card, Col, Row} from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\n\r\nimport logo from './logo22.jpeg'\r\nimport axios from 'axios';\r\n\r\nconst Signup=(props)=>{\r\n\r\n    const [email,setemail]=useState('')\r\n    const [pass,setpass]=useState('')\r\n    const [nickname,setnickname]=useState('')\r\n    const [error,seterror]=useState(false)\r\n    \r\n    const [errorS,seterrorMessage]=useState('')\r\n\r\n    const signupHandle=async(e)=>{\r\n\r\n        const config = {\r\n            headers: {\r\n                \"X-Requested-With\": \"XMLHttpRequest\"\r\n            }\r\n          }\r\n        if(nickname ==''){\r\n            seterror(true)\r\n            seterrorMessage('Nickname is required')   \r\n            return  \r\n        }\r\n        if(email===''){\r\n            \r\n            seterror(true)\r\n            seterrorMessage('enter valid email') \r\n            return\r\n        }\r\n        else{\r\n        const rr =   validateEmail(email)\r\n        if(!rr){\r\n            \r\n            seterror(true)\r\n        seterrorMessage('enter valid email') \r\n        return\r\n        }}\r\n        if(pass===''){\r\n            \r\n            seterror(true)\r\n            seterrorMessage('Password is required')     \r\n            return\r\n        }else{\r\n            \r\n            seterror(false)\r\n            seterrorMessage('')  \r\n        }\r\n        await axios.post('https://frozen-island-11321.herokuapp.com/https://testcccvd.herokuapp.com/signup'\r\n        ,{\r\n           'nickname': nickname\r\n        }, config)\r\n   \r\n        .then(async function(response) {\r\n            console.log(response)\r\n           if(response.statusText==='OK'){\r\n              \r\n       props.history.push('/home')\r\n       } \r\n   \r\n            \r\n       }).catch(function(e){\r\n            console.log(e);\r\n       });\r\n    \r\n\r\n    }\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n        return (\r\n            <div className=\"formcontainer modal-dialog-centered\">\r\n               \r\n               <div>\r\n                <img className=\"logo\" src={logo} alt=\"logo\"/>\r\n                </div>  \r\n                \r\n                 <div className=\"formarea rounded-lg shadow-lg\">\r\n                \r\n                    <Form className=\"form\"  > \r\n               \r\n\r\n\r\n                    <h3 className=\"align-items-center text-primary mb-1 p-3 text-danger text-center\">Sign up</h3>\r\n                    {\r\n                    error?<p style={{\r\n                        color:'red'\r\n                    }}>{errorS}</p>:<p></p>\r\n                    }\r\n\r\n                        <Form.Group className=\"mb-2\" controlId=\"formBasicnickname\">\r\n                            <Form.Label>Nickname:</Form.Label>\r\n                            <Form.Control class=\"form-control input-sm\" type=\"text\"value={nickname} onChange={(e)=>setnickname(e.target.value)} \r\n                             placeholder=\"jerry\" />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address:</Form.Label>\r\n                            <Form.Control class=\"form-control input-sm\" type=\"email\" value={email} onChange={(e)=>setemail(e.target.value)}  placeholder=\"example@example.com\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"mb-2\" controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password:</Form.Label>\r\n                            <Form.Control class=\"form-control input-sm\" type=\"password\"value={pass} onChange={(e)=>setpass(e.target.value)}  placeholder=\"Password\" />\r\n                        </Form.Group>\r\n                        \r\n                        <Button className=\"mt-2 btn-block bg-danger w-100\" onClick={signupHandle}  >\r\n                            Login\r\n                        </Button>\r\n                        <div className=\"text-center m-sm-3\">\r\n                            Already have account? <Link to=\"/\">Sign in</Link>\r\n                            </div>   \r\n                    </Form>\r\n                </div>\r\n          </div>\r\n        );\r\n    }\r\n \r\n\r\nexport default Signup;","/Users/user/Desktop/funmath-frontend/src/home.js",["111","112","113","114","115","116","117","118","119","120"],"import React, { Component } from 'react';\r\nimport Game1 from './games/game1';\r\nimport Game2 from './games/game2';\r\n\r\nimport Game3 from './games/game3';\r\nimport Game4 from './games/game4';\r\nimport Game5 from './games/game5';\r\nimport Game6 from './games/game6';\r\nimport Game7 from './games/game7';\r\nimport Game8 from './games/game8';\r\nimport Game9 from './games/game9';\r\nimport './App.css'\r\nimport { Prev } from 'react-bootstrap/esm/PageItem';\r\n\r\nclass home extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n       this.state = {\r\n           index : 0\r\n       }\r\n\r\n    }\r\n    \r\n game(index) {\r\n\r\n        // if(index.index === 0){\r\n        //   return <Game1/>;\r\n        // }else if (index.index === 1){\r\n        //   return <Game2 />;\r\n        // }\r\n       \r\n        switch (index.index) {\r\n            case 0:\r\n                return <Game1/>;\r\n                break;\r\n                case 1:\r\n                    return <Game2/>;\r\n                    break;\r\n                    case 2:\r\n                        return <Game3/>;\r\n                        break;\r\n                        case 3:\r\n                            return <Game4/>;\r\n                            break;\r\n                            case 4:\r\n                                return <Game5/>;\r\n                                break;\r\n                                case 5:\r\n                                    return <Game6/>;\r\n                                    break;\r\n                                    case 6:\r\n                                        return <Game7/>;\r\n                                        break;\r\n                                        case 7:\r\n                                            return <Game8/>;\r\n                                            break;\r\n                                            case 8:\r\n                                            return <Game9/>;\r\n                                            break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n     \r\n    \r\n        render() {\r\n     \r\n\r\n        return (\r\n            <div className=\"home\" >\r\n                 \r\n                 <input className=\"innerhomebtn  btn-outline-secondary\" type=\"button\" value=\"previous\" onClick={()=>{\r\n                    if(this.state.index>0)\r\n                    this.setState(prevState =>({\r\n                        index : prevState.index-1\r\n                    }))\r\n                   \r\n                    }}></input>  \r\n                <div className=\"innerhome\"><this.game index = {this.state.index}/></div>\r\n                 <input className=\"innerhomebtn\" type=\"button\" value=\"Next\"onClick={()=>{\r\n                    if(this.state.index<8)\r\n                    this.setState(prevState =>({\r\n                        index : prevState.index+1\r\n                    }))\r\n                    \r\n                   }}></input>\r\n              \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default home;","/Users/user/Desktop/funmath-frontend/src/reducers/index.js",[],"/Users/user/Desktop/funmath-frontend/src/actions/auth.js",["121"],"import axios from 'axios'\r\nimport {  SERVER_LOGIN } from '../constants';\r\n \r\n  \r\n \r\n            export const  signin= async(nickname)=> async (dispatch) =>{\r\n               \r\n               await axios.post(SERVER_LOGIN,{\r\n                    'nickname':nickname\r\n                }).\r\n                then(res=>{\r\n                    console.log(res.data)\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err)\r\n                })\r\n                        \r\n                }\r\n\r\n\r\n  \r\n\r\n  ","/Users/user/Desktop/funmath-frontend/src/games/game1.js",[],"/Users/user/Desktop/funmath-frontend/src/games/game5.js",["122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],"import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\n\r\n// Fish coordinates\r\nlet fish_x;\r\nlet fish_y;\r\n// speed of the fish\r\nlet speed = 5;\r\n\r\nlet new_question = false;\r\n//oprator in the question\r\nlet op;\r\n// question json body with two numbers and oprator between them\r\nlet question = {\r\n    n1: 0,\r\n    n2: 0,\r\n    op: 0\r\n}\r\n//options array\r\nlet options = []\r\nlet answer = true // if previous answer is true\r\nlet correct_option; // the correct option \r\nlet correct  // if the answer is correct\r\nlet score = 0\r\nlet start = true\r\n\r\nexport default (props) => {\r\n\r\n\r\n    const setup = (p5, canvasParentRef) => {\r\n        // use parent to render the canvas in this ref\r\n        // (without that p5 will render the canvas outside of your component)\r\n        p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n    };\r\n\r\n    const draw = (p5) => {\r\n\r\n        if (start) {\r\n            setupstart(p5)  //runs only first time\r\n        }\r\n        p5.background(255, 241, 208);\r\n\r\n        myfish(p5)\r\n        keyTyped(p5)\r\n        walls(p5)\r\n\r\n        questions_and_answers(p5);\r\n        retry(p5)\r\n\r\n    };\r\n\r\n\r\n    const setupstart = (p5) => {\r\n\r\n        // fish position in the cordinates\r\n        fish_x = window.innerWidth * 0.6 / 2;\r\n        fish_y = window.innerHeight * 0.75;\r\n\r\n        // picks the question randomly\r\n        question.n1 = p5.floor(p5.random(26, 50))\r\n        question.n2 = p5.floor(p5.random(1, 25))\r\n        question.op = p5.floor(p5.random(1, 3))\r\n\r\n        if (question.op == 1)  // get the oprator +ve or -ve\r\n            op = '+'\r\n        else\r\n            op = '-'\r\n\r\n        // calculate the right answer\r\n        correct_option = question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2\r\n        correct = p5.floor(p5.random(1, 5))\r\n\r\n        //        push the opions in the array \r\n        for (let i = 1; i <= 4; i++) {\r\n            if (i === 1) {\r\n                options.push({\r\n                    'x_cord': 350,\r\n                    'y_cord': window.innerHeight * 0.75 / 4,\r\n                    'number': correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n                })\r\n            }\r\n            else if (i === 2) {\r\n                options.push({\r\n                    'x_cord': (window.innerWidth * 0.6 / 4),\r\n                    'y_cord': window.innerHeight * 0.75 / 1.8,\r\n                    'number': correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n                })\r\n            } else if (i === 3) {\r\n                options.push({\r\n                    'x_cord': (window.innerWidth * 0.6 / 2) + 60,\r\n                    'y_cord': window.innerHeight * 0.75 / 4,\r\n                    'number': correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n                })\r\n            } else if (i === 4) {\r\n                options.push({\r\n                    'x_cord': (window.innerWidth * 0.6 / 2) + window.innerWidth * 0.6 / 3,\r\n                    'y_cord': window.innerHeight * 0.75 / 1.8,\r\n                    'number': correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n                })\r\n            }\r\n        }\r\n        start = false\r\n    }\r\n\r\n    const retry = (p5) => {\r\n\r\n        //get mouse position\r\n        let mouse_x;\r\n        let mouse_y;\r\n        if (p5.mouseIsPressed == true) {\r\n            mouse_x = p5.mouseX;\r\n            mouse_y = p5.mouseY;\r\n        }\r\n\r\n        // if pressed retry or play again\r\n        if (new_question || !answer && mouse_x >= window.innerWidth * 0.6 / 4 && mouse_x <= window.innerWidth * 0.6 / 4 + 80\r\n            && mouse_y > window.innerHeight * 0.75 / 1.2 && window.innerHeight * 0.75 / 1.2 + 20) {\r\n\r\n            // assign the new question\r\n            question.n1 = p5.floor(p5.random(26, 50))\r\n            question.n2 = p5.floor(p5.random(1, 25))\r\n            question.op = p5.floor(p5.random(1, 3))\r\n            if (question.op == 1)\r\n                op = '+'\r\n            else\r\n                op = '-'\r\n\r\n            // get the right answer\r\n            correct_option = question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2\r\n            correct = p5.floor(p5.random(0, 3))\r\n\r\n\r\n            // assign new options to the options array\r\n            for (let i = 0; i <= 3; i++) {\r\n                if (i === 0) {\r\n                    options[i].x_cord = 350\r\n                    options[i].Y_cord = window.innerHeight * 0.75 / 4\r\n                    options[i].number = correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n                }\r\n\r\n                else if (i === 1) {\r\n\r\n                    options[i].x_cord = (window.innerWidth * 0.6 / 4)\r\n                    options[i].y_cord = window.innerHeight * 0.75 / 1.8\r\n                    options[i].number = correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n\r\n                } else if (i === 2) {\r\n\r\n                    options[i].x_cord = (window.innerWidth * 0.6 / 2) + 60\r\n                    options[i].y_cord = window.innerHeight * 0.75 / 4\r\n                    options[i].number = correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n\r\n                } else if (i === 3) {\r\n\r\n                    options[i].x_cord = (window.innerWidth * 0.6 / 2) + window.innerWidth * 0.6 / 3\r\n                    options[i].y_cord = window.innerHeight * 0.75 / 1.8\r\n                    options[i].number = correct === i ? (question.op === 1 ? question.n1 + question.n2 : question.n1 - question.n2) : p5.floor(p5.random(1, 100))\r\n                }\r\n            }\r\n\r\n            //setting the fish position\r\n            fish_x = window.innerWidth * 0.6 / 2;\r\n            fish_y = window.innerHeight * 0.75;\r\n            if (!answer) // check if answer is wrong\r\n                score = 0\r\n\r\n            answer = true\r\n            new_question = false\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    const questions_and_answers = (p5) => {\r\n        p5.textSize(26);\r\n        p5.fill(0, 102, 153);\r\n\r\n        // display the question\r\n        p5.textAlign(p5.CENTER, p5.CENTER);\r\n        \r\n   p5 .textFont('Cursive')\r\n        p5.text('Task :: Let the Funkie get the missing part', (window.innerWidth * 0.6) / 2, 30);\r\n        p5.text(question.n1 + ' ' + op + ' ' + question.n2 + ' =  ___', (window.innerWidth * 0.6) / 2, 60);\r\n\r\n\r\n\r\n        // display the score\r\n        p5.fill('#C22A85');\r\n        p5.textAlign(p5.RIGHT, p5.TOP);\r\n        p5.text('Score : ' + score + '   ', (window.innerWidth * 0.6), 20);\r\n\r\n\r\n        // display the opions\r\n        options.forEach(element => {\r\n            p5.textSize(26);\r\n            p5.fill('#27AE60');\r\n            p5.textAlign(p5.CENTER, p5.CENTER);\r\n            p5.text(element.number, element.x_cord, element.y_cord)\r\n        });\r\n\r\n\r\n        options.forEach(element => {\r\n            if (fish_x > element.x_cord - 25 && fish_x < element.x_cord + 30 && fish_y > element.y_cord + 30 && fish_y < element.y_cord + 60) {\r\n\r\n                // if fish gets the right option\r\n                if (element.number === correct_option) {\r\n                    const index = options.indexOf(element);\r\n                    if (index > -1) {\r\n\r\n\r\n                        score++;\r\n                        new_question = true\r\n                    }\r\n                }\r\n                else { // if get the wrong options\r\n                    answer = false\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n        //    if(new_question){   \r\n        //     question.n1=p5.floor(p5.random(1,50))\r\n        //     question.n2=p5.floor(p5.random(1,50))\r\n        //     question.op=p5.floor(p5.random(1,3))\r\n        //     if(question.op==1)\r\n        //     op='+'\r\n        //     else\r\n        //     op='-'\r\n        //        new_question=false\r\n        //    }\r\n\r\n    }\r\n\r\n\r\n    const walls = (p5) => {\r\n\r\n        // Display the walls \r\n        p5.fill('#870000')\r\n        p5.rect(0, 0, window.innerWidth * 0.6, 10)\r\n        p5.rect(0, 0, 10, window.innerHeight * 0.75)\r\n        p5.rect(0, window.innerHeight * 0.75 - 10, window.innerWidth * 0.6, 10)\r\n        p5.rect(window.innerWidth * 0.6 - 10, 0, 10, window.innerHeight * 0.75);\r\n        p5.rect((window.innerWidth * 0.6) / 2, 120, 10, window.innerHeight * 0.75 - 240)\r\n        p5.rect((window.innerWidth * 0.6 / 2 * 0.3) - 10, window.innerHeight * 0.75 / 3, window.innerWidth * 0.6 / 4, 10)\r\n        p5.rect((window.innerWidth * 0.6 / 2 * 0.3) * 4 + 10, window.innerHeight * 0.75 / 3, window.innerWidth * 0.6 / 4, 10)\r\n        p5.rect((window.innerWidth * 0.6 / 2 * 0.3) - 10, (window.innerHeight * 0.75 / 3) * 2, window.innerWidth * 0.6 / 4, 10)\r\n        p5.rect((window.innerWidth * 0.6 / 2 * 0.3) * 4 + 10, (window.innerHeight * 0.75 / 3) * 2, window.innerWidth * 0.6 / 4, 10)\r\n    }\r\n\r\n\r\n    const myfish = (p5) => {\r\n\r\n        // Sketch the Fish\r\n        p5.noStroke()\r\n        p5.fill('#FF4A1D')\r\n        p5.circle(fish_x, fish_y - 50, 50, 50)\r\n\r\n        p5.fill('#fff')\r\n        p5.ellipse(fish_x - 10, fish_y - 58, 13, 16)\r\n        p5.ellipse(fish_x + 10, fish_y - 58, 13, 16)\r\n\r\n        p5.fill('#000')\r\n        p5.ellipse(fish_x - 10, fish_y - 58, 6, 6)\r\n        p5.ellipse(fish_x + 10, fish_y - 58, 6, 6)\r\n\r\n        p5.fill('#fff')\r\n        p5.ellipse(fish_x, fish_y - 38, 9, 9)\r\n\r\n    }\r\n    const keyTyped = (p5) => {\r\n\r\n        //Get the key typed\r\n        if (answer) {\r\n            if (p5.keyIsDown(p5.LEFT_ARROW) && fish_x > 35) {\r\n\r\n\r\n\r\n                // Check if there's wall between\r\n                if (fish_x >= (window.innerWidth * 0.6) / 2 && fish_x <= (window.innerWidth * 0.6) / 2 + 40\r\n                    && (fish_y > 150 && fish_y < 190 + window.innerHeight * 0.75 - 240)\r\n                    ||\r\n                    (fish_x >= (window.innerWidth * 0.6 / 2 * 0.3) - 10 && fish_x <= (window.innerWidth * 0.6 / 2 * 0.3) + 18 + window.innerWidth * 0.6 / 4\r\n                        || fish_x >= ((window.innerWidth * 0.6 / 2 * 0.3) * 4) && fish_x <= ((window.innerWidth * 0.6 / 2 * 0.3) * 4) + 45 + window.innerWidth * 0.6 / 4\r\n                    )\r\n\r\n                    && ((fish_y >= (window.innerHeight * 0.75) / 3 + 35 && fish_y < (window.innerHeight * 0.75) / 3 + 80)\r\n                        || (fish_y >= (2 * ((window.innerHeight * 0.75) / 3) + 35) && fish_y < (2 * ((window.innerHeight * 0.75) / 3) + 80))\r\n\r\n                    )\r\n                ) {\r\n\r\n                }\r\n                else\r\n                    fish_x -= speed;\r\n            }\r\n\r\n            // Check if there's wall between\r\n            else if (p5.keyIsDown(p5.RIGHT_ARROW) && fish_x < window.innerWidth * 0.6 - 35) {\r\n                if ((fish_x >= (window.innerWidth * 0.6) / 2 - 30 && fish_x <= (window.innerWidth * 0.6) / 2 + 35\r\n                    && (fish_y > 150 && fish_y < 190 + window.innerHeight * 0.75 - 240))\r\n                    ||\r\n                    (fish_x >= (window.innerWidth * 0.6 / 2 * 0.3) - 43 && fish_x <= (window.innerWidth * 0.6 / 2 * 0.3) - 20 + window.innerWidth * 0.6 / 4\r\n                        || fish_x >= (((window.innerWidth * 0.6 / 2 * 0.3) * 4) - 30) && fish_x <= ((window.innerWidth * 0.6 / 2 * 0.3) * 4) + 34 + window.innerWidth * 0.6 / 4\r\n                    )\r\n\r\n                    && ((fish_y >= (window.innerHeight * 0.75) / 3 + 35 && fish_y < (window.innerHeight * 0.75) / 3 + 80)\r\n                        || (fish_y >= (2 * ((window.innerHeight * 0.75) / 3) + 35) && fish_y < (2 * ((window.innerHeight * 0.75) / 3) + 80))\r\n\r\n                    )\r\n                ) {\r\n\r\n                }\r\n                else\r\n                    fish_x += speed;\r\n            }\r\n\r\n            // Check if there's wall between\r\n            else if (p5.keyIsDown(p5.DOWN_ARROW) && fish_y < window.innerHeight * 0.75 + 15) {\r\n                if ((fish_x >= (window.innerWidth * 0.6) / 2 - 25 && fish_x <= (window.innerWidth * 0.6) / 2 + 35\r\n                    && (fish_y > 145 && fish_y < 190 + window.innerHeight * 0.75 - 240))\r\n                    ||\r\n                    (fish_x >= (window.innerWidth * 0.6 / 2 * 0.3) - 38 && fish_x <= (window.innerWidth * 0.6 / 2 * 0.3) + 10 + window.innerWidth * 0.6 / 4\r\n                        || fish_x >= (((window.innerWidth * 0.6 / 2 * 0.3) * 4) - 20) && fish_x <= ((window.innerWidth * 0.6 / 2 * 0.3) * 4) + 34 + window.innerWidth * 0.6 / 4\r\n                    )\r\n\r\n                    && ((fish_y >= (window.innerHeight * 0.75) / 3 + 25 && fish_y < (window.innerHeight * 0.75) / 3 + 70)\r\n                        || (fish_y >= (2 * ((window.innerHeight * 0.75) / 3) + 25) && fish_y < (2 * ((window.innerHeight * 0.75) / 3) + 70))\r\n\r\n                    )\r\n                ) { }\r\n                else\r\n                    fish_y += speed;\r\n            }\r\n\r\n            // Check if there's wall between\r\n            else if (p5.keyIsDown(p5.UP_ARROW) && fish_y > 85) {\r\n                if ((fish_x >= (window.innerWidth * 0.6) / 2 - 25 && fish_x <= (window.innerWidth * 0.6) / 2 + 35\r\n                    && (fish_y > 130 && fish_y < 200 + window.innerHeight * 0.75 - 240))\r\n                    ||\r\n                    (fish_x >= (window.innerWidth * 0.6 / 2 * 0.3) - 38 && fish_x <= (window.innerWidth * 0.6 / 2 * 0.3) + 10 + window.innerWidth * 0.6 / 4\r\n                        || fish_x >= (((window.innerWidth * 0.6 / 2 * 0.3) * 4) - 20) && fish_x <= ((window.innerWidth * 0.6 / 2 * 0.3) * 4) + 34 + window.innerWidth * 0.6 / 4\r\n                    )\r\n\r\n                    && ((fish_y >= (window.innerHeight * 0.75) / 3 + 25 && fish_y < (window.innerHeight * 0.75) / 3 + 90)\r\n                        || (fish_y >= (2 * ((window.innerHeight * 0.75) / 3) + 25) && fish_y < (2 * ((window.innerHeight * 0.75) / 3) + 90))\r\n\r\n                    )\r\n                ) { }\r\n                else\r\n                    fish_y -= speed;\r\n            }\r\n        }\r\n        else {\r\n            //Display the wrong answer message\r\n            p5.textSize(26);\r\n            p5.fill('#E74C3C')\r\n\r\n            p5.textAlign(p5.RIGHT, p5.TOP);\r\n            \r\n   p5 .textFont('Cursive')\r\n            p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2 + window.innerWidth * 0.6 / 3, window.innerHeight * 0.75 / 1.2)\r\n\r\n            p5.textAlign(p5.LEFT, p5.TOP);\r\n            \r\n   p5 .textFont('Cursive')\r\n            p5.text('Retry ↻', window.innerWidth * 0.6 / 4, window.innerHeight * 0.75 / 1.2)\r\n        }\r\n    }\r\n\r\n    return <Sketch setup={setup}\r\n        draw={draw}\r\n        style={\r\n            {\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                alignContent: 'center',\r\n\r\n            }\r\n        }\r\n    />;\r\n};","/Users/user/Desktop/funmath-frontend/src/games/game2.js",[],"/Users/user/Desktop/funmath-frontend/src/games/game4.js",["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182"],"import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n// Coordinates from where the snake starts\r\nlet x_start = 200;\r\nlet y_start = 200;\r\n// x and y cordinates array of the beads of snake \r\nlet x_cord = [];\r\nlet y_cord = [];\r\n// total beads of snake\r\nlet beats = 100;\r\n// Direction of snake \r\n//  1==>right\r\n// 2==> upwards\r\n// 3==>left\r\n// 4==>Down\r\nlet direction = 1;\r\nlet speed = 1;  //speed of snake\r\nlet changedirection = false;  // for changing the direction\r\nlet previous_direction = 2;\r\nlet collide = false;   //if snake collides with the outer walls\r\nlet food = [] // food array \r\nlet answer = true\r\nlet answers_remainig = true\r\nlet start = true\r\n\r\n\r\nexport default (props) => {\r\n\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    // use parent to render the canvas in this ref\r\n    // (without that p5 will render the canvas outside of your component)\r\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n  };\r\n\r\n  const draw = (p5) => {\r\n\r\n\r\n    if (start) {\r\n      setupstart(p5) ///Runs only first time\r\n    }\r\n    p5.background(255, 241, 208);\r\n\r\n\r\n    update_snake(p5);//moves the snake \r\n    update_direction(p5);   // updates the direction if changed\r\n    check_collider(); //checks if snakes collide\r\n    questions_and_answers(p5);//dispaly the questions ans answrs\r\n    getMouseClick(p5)/// get the mouse click on the retry\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  const setupstart = (p5) => {\r\n\r\n\r\n    // First times push the food array with cordinates and the number \r\n    for (let i = beats; i > 0; i--) {\r\n      if (i == 1)\r\n        x_cord.push(x_start + 10)\r\n      else\r\n        x_cord.push(x_start - i);\r\n      y_cord.push(y_start)\r\n\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      food.push({\r\n        'x_cord': p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10,\r\n        'y_cord': p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10,\r\n        'number': p5.floor(p5.random(10, 99)),\r\n      })\r\n\r\n    }\r\n    start = false\r\n\r\n  }\r\n  const check_collider = () => {\r\n    let snake_head_x = x_cord[beats - 1];\r\n    let snake_head_y = y_cord[beats - 1];\r\n\r\n\r\n    //// Check if the snake collide with the canvas walls\r\n    if (snake_head_x < 0 || snake_head_x > window.innerWidth * 0.6 || snake_head_y < 0 || snake_head_y > window.innerHeight * 0.75) {\r\n      collide = true\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      if ((snake_head_x > element.x_cord - 15 && snake_head_x < element.x_cord + 15) && (snake_head_y > element.y_cord - 15 && snake_head_y < element.y_cord + 15)) {\r\n\r\n        // check if the snake get the right answer food\r\n        if (element.number % 2 != 0)\r\n          answer = false\r\n        else {\r\n\r\n          // const index = food.indexOf(element);\r\n          // if (index > -1) {\r\n          //   food.splice(index, 1);\r\n          // }\r\n\r\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\r\n          // and appears as the snake eated it \r\n          element.x_cord = -11\r\n          element.y_cord = -11\r\n          element.number = 1;\r\n          answers_remainig = false;\r\n        }\r\n      } else {\r\n\r\n      }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  const questions_and_answers = (p5) => {\r\n    // Display the questions \r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n\r\n    p5.textAlign(p5.CENTER, p5.CENTER);\r\n    \r\n   p5 .textFont('Cursive')\r\n    p5.text('Task :: Let the snake eat the Even numbers', (window.innerWidth * 0.6) / 2, 20);\r\n\r\n    // display all the numbers on the food present in the array \r\n    for (let i = 0; i < food.length; i++) {\r\n\r\n      p5.fill(255, 128, 0);\r\n      p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\r\n      p5.textSize(20);\r\n      p5.fill(0, 102, 153)\r\n\r\n      p5.textAlign(p5.CENTER, p5.CENTER);\r\n      p5.text(food[i].number, food[i].x_cord, food[i].y_cord)\r\n\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      // check if the answer is remaining\r\n      if (element.number % 2 == 0)\r\n        answers_remainig = true\r\n\r\n\r\n    });\r\n\r\n  }\r\n\r\n  const update_snake = (p5) => {\r\n    //p5.noStroke();        \r\n    /// Updates the snake position \r\n    p5.fill(157, 0, 0);\r\n    for (let index = 0; index < beats; index++) {\r\n      p5.circle(x_cord[index], y_cord[index], 10, 10);\r\n    }\r\n  }\r\n  const update_direction = (p5) => {\r\n\r\n    // if the snake present in the canvas and there's answer present there\r\n    if (!collide && answer && answers_remainig) {\r\n      switch (direction) {\r\n\r\n        // case 1 is the direcion in the right\r\n        case 1:\r\n          {\r\n            if (changedirection) {  // if direction is changed from previous direction\r\n              x_cord[beats - 1] += 10;\r\n              if (previous_direction == 2)  // if previous direction is positive y axis\r\n                y_cord[beats - 1] += 10;\r\n              else      // if previous Direction is negative y axis\r\n                y_cord[beats - 1] -= 10;\r\n\r\n              changedirection = false;\r\n              previous_direction = 1;\r\n            }\r\n            for (let index = 0; index < beats; index++) {\r\n              if (index == beats - 1) {\r\n\r\n                x_cord[beats - 1] += speed;\r\n              }\r\n              else if (index == beats - 2) {\r\n\r\n                x_cord[index] = x_cord[index + 1] - 10;\r\n                y_cord[index] = y_cord[index + 1];\r\n\r\n              }\r\n\r\n              else {\r\n                x_cord[index] = x_cord[index + 1];\r\n                y_cord[index] = y_cord[index + 1];\r\n              }\r\n            }\r\n            changedirection = false;\r\n          }\r\n          break;\r\n\r\n        // case 2 is the direcion in the upwards\r\n        case 2:\r\n          if (changedirection) { // if direction is changed from previous direction\r\n            y_cord[beats - 1] -= 10;\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else  //if previous direction is positive x axis\r\n              x_cord[beats - 1] -= 10;\r\n            changedirection = false\r\n            previous_direction = 2;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] -= speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] + 10;\r\n\r\n            }\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n            }\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n\r\n          break;\r\n\r\n        // case 3 is the direcion in the left\r\n        case 3:\r\n          if (changedirection) { // if direction is changed from previous direction\r\n            x_cord[beats - 1] -= 10;\r\n            if (previous_direction == 2)// if previous direction is posiive y axis\r\n              y_cord[beats - 1] += 10;\r\n            else //if previous direction is negative y axis\r\n              y_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false;\r\n            previous_direction = 3;\r\n          }\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              x_cord[beats - 1] -= speed;\r\n            }\r\n            else if (index == beats - 2) {\r\n\r\n              x_cord[index] = x_cord[index + 1] + 10;\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n        // case 4 is the direcion in the downwards\r\n        case 4:\r\n          if (changedirection) { // if direction is changed from previous direction\r\n            y_cord[beats - 1] += 10;\r\n\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else // if previous direction is posiive x axis\r\n              x_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false\r\n            previous_direction = 4;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] += speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] - 10;\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    // if collided with canvas walls print message\r\n    else if (collide) {\r\n      p5.textSize(26);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Oops, Try again', window.innerWidth * 0.6 / 2, 50)\r\n\r\n      p5 .textFont('Cursive')\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n\r\n    // if get the wrong answer\r\n    else if (!answer) {\r\n      p5.textSize(26);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 50)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n\r\n    // if no answer remains\r\n    else if (!answers_remainig) {\r\n      p5.textSize(26);\r\n      p5.fill(0, 153, 0);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('You Won ✓', window.innerWidth * 0.6 / 2, 50)\r\n    }\r\n  }\r\n\r\n\r\n  const getMouseClick = (p5) => {\r\n    let mouse_x;\r\n    let mouse_y;\r\n\r\n    //  get the mouse axis\r\n    if (p5.mouseIsPressed == true) {\r\n      mouse_x = p5.mouseX;\r\n      mouse_y = p5.mouseY;\r\n    }\r\n\r\n    // if pressed on retry or play again\r\n    if ((!answer || collide) && mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\r\n      for (let i = 0; i < 10; i++) {\r\n\r\n        food[i].x_cord = p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10\r\n        food[i].y_cord = p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10\r\n        food[i].number = p5.floor(p5.random(10, 99))\r\n\r\n\r\n      }\r\n      collide = false\r\n      answer = true\r\n\r\n      //reset the original direction and position\r\n      x_start = 200;\r\n      y_start = 200;\r\n      direction = 1\r\n      for (let i = beats; i > 0; i--) {\r\n        if (i == 1)\r\n          x_cord[i] = (x_start + 10)\r\n        else\r\n          x_cord[i] = (x_start - i);\r\n        y_cord[i] = (y_start)\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n  const keyPressed = (p5) => {\r\n\r\n    // check which key is pressed\r\n    if (p5.keyCode === p5.LEFT_ARROW) {\r\n      if (direction !== 1 && direction !== 3) {\r\n        direction = 3;\r\n        changedirection = true;\r\n      }\r\n    } else if (p5.keyCode === p5.RIGHT_ARROW) {\r\n      if (direction !== 3 && direction !== 1) {\r\n        direction = 1;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n    else if (p5.keyCode === p5.UP_ARROW) {\r\n      if (direction !== 4 && direction !== 2) {\r\n        direction = 2;\r\n\r\n        changedirection = true;\r\n      }\r\n\r\n    }\r\n    else if (p5.keyCode === p5.DOWN_ARROW) {\r\n      if (direction !== 2 && direction !== 4) {\r\n        direction = 4;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return <Sketch setup={setup}\r\n    draw={draw}\r\n    keyPressed={keyPressed}\r\n    style={\r\n      {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        alignContent: 'center',\r\n        backgroundColor: '#FFF1D0',\r\n      }\r\n    }\r\n  />;\r\n};","/Users/user/Desktop/funmath-frontend/src/games/game3.js",["183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n// Coordinates from where the snake starts\r\nlet x_start = 200;\r\nlet y_start = 200;\r\n// x and y cordinates array of the beads of snake \r\nlet x_cord = [];\r\nlet y_cord = [];\r\n// total beads of snake\r\nlet beats = 100;\r\n// Direction of snake \r\n//  1==>right\r\n// 2==> upwards\r\n// 3==>left\r\n// 4==>Down\r\nlet direction = 1;\r\nlet speed = 1;  //speed of snake\r\nlet changedirection = false;  // for changing the direction\r\nlet previous_direction = 2;\r\nlet collide = false;   //if snake collides with the outer walls\r\nlet food = [] // food array \r\nlet answer = true\r\nlet answers_remainig = true\r\nlet start = true\r\n\r\n\r\nexport default (props) => {\r\n\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    // use parent to render the canvas in this ref\r\n    // (without that p5 will render the canvas outside of your component)\r\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n  };\r\n\r\n  const draw = (p5) => {\r\n\r\n\r\n    if (start) {\r\n      setupstart(p5) ///Runs only first time\r\n    }\r\n    p5.background(255, 241, 208);\r\n\r\n\r\n    update_snake(p5);//moves the snake \r\n    update_direction(p5);   // updates the direction if changed\r\n    check_collider(); //checks if snakes collide\r\n    questions_and_answers(p5);//dispaly the questions ans answrs\r\n\r\n\r\n    getMouseClick(p5)/// get the mouse click on the retry\r\n\r\n\r\n  };\r\n\r\n\r\n  const setupstart = (p5) => {\r\n\r\n    // First times push the food array with cordinates and the number \r\n    for (let i = beats; i > 0; i--) {\r\n      if (i == 1)\r\n        x_cord.push(x_start + 10)\r\n      else\r\n        x_cord.push(x_start - i);\r\n      y_cord.push(y_start)\r\n\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      food.push({\r\n        'x_cord': p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10,\r\n        'y_cord': p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10,\r\n        'number': p5.floor(p5.random(10, 99)),\r\n      })\r\n\r\n    }\r\n    start = false\r\n  }\r\n\r\n  const check_collider = () => {\r\n    let snake_head_x = x_cord[beats - 1];\r\n    let snake_head_y = y_cord[beats - 1];\r\n\r\n\r\n    //// Check if the snake collide with the canvas walls\r\n    if (snake_head_x < 0 || snake_head_x > window.innerWidth * 0.60 || snake_head_y < 0 || snake_head_y > window.innerHeight * 0.75) {\r\n      collide = true\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      if ((snake_head_x > element.x_cord - 15 && snake_head_x < element.x_cord + 15) && (snake_head_y > element.y_cord - 15 && snake_head_y < element.y_cord + 15)) {\r\n\r\n        // check if the snake get the right answer food\r\n        if (element.number % 2 == 0)\r\n          answer = false\r\n        else {\r\n\r\n          // const index = food.indexOf(element);\r\n          // if (index > -1) {\r\n          //   food.splice(index, 1);\r\n          // }\r\n          // answers_remainig=false;\r\n\r\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\r\n          // and appears as the snake eated it \r\n          element.x_cord = -11\r\n          element.y_cord = -11\r\n          element.number = 2;\r\n          answers_remainig = false;\r\n        }\r\n      } else {\r\n\r\n      }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  const questions_and_answers = (p5) => {\r\n    // Display the questions \r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n\r\n    p5.textAlign(p5.CENTER, p5.TOP);\r\n    \r\n    p5.textFont('Cursive')\r\n    p5.text('Task :: Let the snake eat the Odd numbers', (window.innerWidth * 0.6) / 2, 20);\r\n\r\n    // display all the numbers on the food present in the array \r\n    for (let i = 0; i < food.length; i++) {\r\n\r\n      p5.fill(255, 128, 0);\r\n      p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\r\n      p5.textSize(20);\r\n      p5.fill(0, 102, 153)\r\n\r\n      p5.textAlign(p5.CENTER, p5.CENTER);\r\n      p5.text(food[i].number, food[i].x_cord, food[i].y_cord)\r\n\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      // check if the answer is remaining\r\n      if (element.number % 2 != 0)\r\n        answers_remainig = true\r\n\r\n\r\n    });\r\n\r\n  }\r\n\r\n  const update_snake = (p5) => {\r\n    //p5.noStroke();        \r\n    /// Updates the snake position \r\n    p5.fill(157, 0, 0);\r\n    for (let index = 0; index < beats; index++) {\r\n      p5.circle(x_cord[index], y_cord[index], 10, 10);\r\n    }\r\n  }\r\n  const update_direction = (p5) => {\r\n\r\n    // if the snake present in the canvas and there's answer present there\r\n    if (!collide && answer && answers_remainig) {\r\n      switch (direction) {\r\n\r\n        // case 1 is the direcion in the right\r\n        case 1:\r\n          {\r\n            if (changedirection) {  // if direction is changed from previous direction\r\n              x_cord[beats - 1] += 10;\r\n              if (previous_direction == 2) // if previous direction is positive y axis\r\n                y_cord[beats - 1] += 10;\r\n              else       // if previous Direction is negative y axis\r\n                y_cord[beats - 1] -= 10;\r\n\r\n              changedirection = false;\r\n              previous_direction = 1;\r\n            }\r\n            for (let index = 0; index < beats; index++) {\r\n              if (index == beats - 1) {\r\n\r\n                x_cord[beats - 1] += speed;\r\n              }\r\n              else if (index == beats - 2) {\r\n\r\n                x_cord[index] = x_cord[index + 1] - 10;\r\n                y_cord[index] = y_cord[index + 1];\r\n\r\n              }\r\n\r\n              else {\r\n                x_cord[index] = x_cord[index + 1];\r\n                y_cord[index] = y_cord[index + 1];\r\n\r\n              }\r\n\r\n            }\r\n\r\n\r\n\r\n            changedirection = false;\r\n          }\r\n          break;\r\n\r\n        // case 2 is the direcion in the upwards\r\n        case 2:\r\n\r\n          if (changedirection) { // if direction is changed from previous direction\r\n            y_cord[beats - 1] -= 10;\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else    //if previous direction is positive x axis\r\n              x_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false\r\n            previous_direction = 2;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] -= speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] + 10;\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n\r\n\r\n          break;\r\n\r\n        // case 3 is the direcion in the left\r\n        case 3:\r\n\r\n\r\n\r\n          if (changedirection) { // if direction is changed from previous direction\r\n            x_cord[beats - 1] -= 10;\r\n            if (previous_direction == 2)// if previous direction is posiive y axis\r\n              y_cord[beats - 1] += 10;\r\n            else //if previous direction is negative y axis\r\n              y_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false;\r\n            previous_direction = 3;\r\n          }\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              x_cord[beats - 1] -= speed;\r\n            }\r\n            else if (index == beats - 2) {\r\n\r\n              x_cord[index] = x_cord[index + 1] + 10;\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n        // case 4 is the direcion in the downwards\r\n        case 4:\r\n          if (changedirection) { // if direction is changed from previous direction\r\n            y_cord[beats - 1] += 10;\r\n\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else // if previous direction is posiive x axis\r\n              x_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false\r\n            previous_direction = 4;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] += speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] - 10;\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    // if collided with canvas walls print message\r\n    else if (collide) {\r\n      p5.textSize(26);\r\n\r\n      p5.textFont('Cursive')\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      p5.text('Oops, Try again', window.innerWidth * 0.6 / 2, 50)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n\r\n    // if get the wrong answer\r\n    else if (!answer) {\r\n      p5.textSize(26);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n      p5.textFont('Cursive')\r\n      p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 50)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n\r\n    // if no answer remains\r\n    else if (!answers_remainig) {\r\n      p5.textSize(26);\r\n      p5.fill(0, 153, 0);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n      p5.textFont('Cursive')\r\n      p5.text('You Won ✓', window.innerWidth * 0.6 / 2, 50)\r\n    }\r\n  }\r\n\r\n\r\n  const getMouseClick = (p5) => {\r\n    let mouse_x;\r\n    let mouse_y;\r\n\r\n    //  get the mouse axis\r\n    if (p5.mouseIsPressed == true) {\r\n      mouse_x = p5.mouseX;\r\n      mouse_y = p5.mouseY;\r\n    }\r\n    if ((!answer || collide) && mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\r\n\r\n      // if pressed on retry or play again\r\n      for (let i = 0; i < 10; i++) {\r\n\r\n        food[i].x_cord = p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10\r\n        food[i].y_cord = p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10\r\n        food[i].number = p5.floor(p5.random(10, 99))\r\n\r\n\r\n      }\r\n      collide = false\r\n      answer = true\r\n\r\n      //reset the original direction and position\r\n      x_start = 200;\r\n      y_start = 200;\r\n      direction = 1\r\n      for (let i = beats; i > 0; i--) {\r\n        if (i == 1)\r\n          x_cord[i] = (x_start + 10)\r\n        else\r\n          x_cord[i] = (x_start - i);\r\n        y_cord[i] = (y_start)\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n  const keyPressed = (p5) => {\r\n\r\n    // check which key is pressed\r\n    if (p5.keyCode === p5.LEFT_ARROW) {\r\n      if (direction !== 1 && direction !== 3) {\r\n        direction = 3;\r\n        changedirection = true;\r\n      }\r\n    } else if (p5.keyCode === p5.RIGHT_ARROW) {\r\n      if (direction !== 3 && direction !== 1) {\r\n        direction = 1;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n    else if (p5.keyCode === p5.UP_ARROW) {\r\n      if (direction !== 4 && direction !== 2) {\r\n        direction = 2;\r\n\r\n        changedirection = true;\r\n      }\r\n\r\n    }\r\n    else if (p5.keyCode === p5.DOWN_ARROW) {\r\n      if (direction !== 2 && direction !== 4) {\r\n        direction = 4;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return <Sketch setup={setup}\r\n    draw={draw}\r\n    keyPressed={keyPressed}\r\n    style={\r\n      {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        alignContent: 'center',\r\n        backgroundColor: '#FFF1D0',\r\n      }\r\n    }\r\n  />;\r\n};","/Users/user/Desktop/funmath-frontend/src/games/game7.js",["203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230"],"import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n// Coordinates from where the snake starts\r\nlet x_start = 200;\r\nlet y_start = 200;\r\n// x and y cordinates array of the beads of snake \r\nlet x_cord = [];\r\nlet y_cord = [];\r\n// total beads of snake\r\nlet beats = 100;\r\n// Direction of snake \r\n//  1==>right\r\n// 2==> upwards\r\n// 3==>left\r\n// 4==>Down\r\nlet direction = 1;\r\nlet speed = 1;  //speed of snake\r\nlet changedirection = false;  // for changing the direction\r\nlet previous_direction = 2;\r\nlet collide = false;   //if snake collides with the outer walls\r\nlet food = [] // food array \r\nlet answer = true\r\nlet answers_remainig = true\r\nlet start = true\r\n\r\nexport default (props) => {\r\n \r\n  \r\n\tconst setup = (p5, canvasParentRef) => {\r\n\t\t// use parent to render the canvas in this ref\r\n\t\t// (without that p5 will render the canvas outside of your component)\r\n     p5.createCanvas(window.innerWidth*0.6, window.innerHeight*0.75).parent(canvasParentRef)\r\n\r\n   \r\n\t};\r\n\r\n\tconst draw = (p5) => {\r\n\r\n    \r\n    if(start){\r\n      setupstart(p5) ///Runs only first time\r\n    }\r\n\t\tp5.background(255,241,208);\r\n    \r\n\r\n    update_snake(p5);//moves the snake \r\n    update_direction(p5);   // updates the direction if changed\r\n    check_collider(); //checks if snakes collide\r\n    questions_and_answers(p5);//dispaly the questions ans answrs\r\n\r\n  \r\n    getMouseClick(p5)/// get the mouse click on the retry\r\n    \r\n    \r\n\t};\r\n\r\n  const setupstart=(p5)=>{\r\n\r\n// First times push the food array with cordinates and the number \r\n    for (let i = beats; i > 0; i--) {\r\n      if(i==1)\r\n      x_cord.push(x_start+10)\r\n      else\r\n     x_cord.push(x_start-i);\r\n     y_cord.push(y_start)\r\n      \r\n    }\r\n     for (let i = 0; i < 10; i++) {\r\n       food.push({\r\n         'x_cord':p5.floor(p5.random(10, (window.innerWidth*0.6 ) / 10)) * 10,\r\n         'y_cord':p5.floor(p5.random(10, (window.innerHeight*0.75 ) / 10)) * 10,\r\n         'number':p5.floor(p5.random(10, 99)) ,\r\n       })\r\n       \r\n     }\r\n     start=false\r\n  }\r\n\r\n  const check_collider=()=>{\r\n    let snake_head_x=x_cord[beats-1];\r\n    let snake_head_y=y_cord[beats-1];\r\n\r\n\r\n//// Check if the snake collide with the canvas walls\r\n      if(snake_head_x<0||snake_head_x>window.innerWidth*0.60||snake_head_y<0||snake_head_y>window.innerHeight*0.75){\r\n        collide=true\r\n      }\r\n\r\n     \r\n      food.forEach(element => {\r\n        if ((snake_head_x>element.x_cord-15&&snake_head_x<element.x_cord+15)&&(snake_head_y>element.y_cord-15&&snake_head_y<element.y_cord+15)) {\r\n          \r\n        // logic to get the maximum number\r\n            let max=0;\r\n            food.forEach(xelement => {\r\n               if(max<xelement.number)\r\n                max= xelement.number\r\n            });\r\n            \r\n        // check if the snake get the right answer food\r\n          if(element.number!=max)\r\n          answer=false\r\n          else{\r\n                        \r\n            // const index = food.indexOf(element);\r\n            // if (index > -1) {\r\n            //   food.splice(index, 1);\r\n            // }\r\n\r\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\r\n          // and appears as the snake eated it \r\n\r\n            element.x_cord=-11\r\n            element.y_cord=-11\r\n            element.number=0;\r\n            answers_remainig=false;\r\n            \r\n          }\r\n        } else {\r\n          \r\n        }\r\n      });\r\n\r\n \r\n      \r\n\r\n\r\n  }\r\n\r\n  const questions_and_answers=(p5)=>{\r\n    \r\n    // Display the questions \r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n    p5.textAlign(p5.CENTER,p5.TOP);\r\n    \r\n   p5 .textFont('Cursive')\r\n    p5.text('Task :: Let the snake eat the numbers in \\n Descending order ', (window.innerWidth*0.6)/2, 10);\r\n    \r\n    // display all the numbers on the food present in the array \r\n    for (let i = 0; i < food.length; i++) {\r\n           \r\n    p5.fill(255,128,0);\r\n    p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\r\n    p5.textSize(20);\r\n    p5.fill(0, 102, 153)\r\n    \r\n    p5.textAlign(p5.CENTER,p5.CENTER);\r\n    p5.text(food[i].number,food[i].x_cord,food[i].y_cord)\r\n\r\n    }\r\n\r\n\r\n        food.forEach(element => {\r\n          // check if the answer is remaining\r\n            if(element.number>0)\r\n            answers_remainig=true\r\n\r\n             \r\n        });\r\n    \r\n  }\r\n \r\n  const update_snake=(p5)=>{\r\n    //p5.noStroke();        \r\n    \r\n    /// Updates the snake position \r\n    p5.fill(157,0,0);\r\n    for (let index = 0; index <beats; index++) {\r\n         p5.circle(x_cord[index], y_cord[index], 10, 10); \r\n    }\r\n  }\r\n  const update_direction=(p5)=>{\r\n\r\n    // if the snake present in the canvas and there's answer present there\r\n        if(!collide&&answer&&answers_remainig){ \r\n                  switch (direction) {\r\n                    \r\n        // case 1 is the direcion in the right\r\n                    case 1:\r\n                  {  \r\n                if(changedirection){  // if direction is changed from previous direction\r\n                  x_cord[beats-1]+=10;\r\n                  if(previous_direction==2) // if previous direction is positive y axis\r\n                  y_cord[beats-1]+=10;\r\n                  else    // if previous Direction is negative y axis\r\n                  y_cord[beats-1]-=10;\r\n                  \r\n                  changedirection=false;\r\n                  previous_direction=1;\r\n                    }\r\n                      for (let index = 0; index < beats; index++) {\r\n                      if(index==beats-1){\r\n                        \r\n                      x_cord[beats-1]+=speed;\r\n                      }\r\n                      else if(index==beats-2){\r\n                        \r\n                        x_cord[index]=x_cord[index+1]-10;\r\n                        y_cord[index]=y_cord[index+1];\r\n                            \r\n                      }\r\n\r\n                      else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                          \r\n                      }\r\n              \r\n                      }\r\n                        \r\n                    \r\n                      \r\n                      changedirection=false;\r\n                  }\r\n                      break;\r\n\r\n // case 2 is the direcion in the upwards\r\n                      case 2:\r\n                    \r\n                        if(changedirection){ // if direction is changed from previous direction\r\n                          y_cord[beats-1]-=10;\r\n                          if(previous_direction==3)// if previous direction is negative x axis\r\n                          x_cord[beats-1]+=10;\r\n                          else    //if previous direction is positive x axis\r\n                          x_cord[beats-1]-=10;\r\n                          \r\n                          changedirection=false\r\n                          previous_direction=2;\r\n                            }\r\n                        \r\n                      for (let index = 0; index < beats; index++) {\r\n                        if(index==beats-1){\r\n                          \r\n                      y_cord[beats-1]-=speed;\r\n                      \r\n                        }\r\n                        else if(index+1==beats-1){\r\n                          \r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1]+10;\r\n                            \r\n                        }\r\n              \r\n                        else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                            \r\n                      }\r\n                \r\n                      }\r\n                        \r\n\r\n                      changedirection=false;\r\n\r\n\r\n                        break;\r\n\r\n                        \r\n           // case 3 is the direcion in the left\r\n                        case 3:\r\n                          \r\n\r\n                          \r\n                if(changedirection){ // if direction is changed from previous direction\r\n                  x_cord[beats-1]-=10;\r\n                  if(previous_direction==2)// if previous direction is posiive y axis\r\n                  y_cord[beats-1]+=10;\r\n                  else //if previous direction is negative y axis\r\n                  y_cord[beats-1]-=10;\r\n                  \r\n                  changedirection=false;\r\n                  previous_direction=3;\r\n                    }\r\n                      for (let index = 0; index < beats; index++) {\r\n                      if(index==beats-1){\r\n                        \r\n                      x_cord[beats-1]-=speed;\r\n                      }\r\n                      else if(index==beats-2){\r\n                        \r\n                        x_cord[index]=x_cord[index+1]+10;\r\n                        y_cord[index]=y_cord[index+1];\r\n                            \r\n                      }\r\n\r\n                      else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                          \r\n                      }\r\n              \r\n                      }\r\n                        \r\n                      changedirection=false;\r\n                      break;\r\n\r\n           // case 4 is the direcion in the downwards\r\n                      case 4:\r\n                        if(changedirection){ // if direction is changed from previous direction\r\n                          y_cord[beats-1]+=10;\r\n                          \r\n                        if(previous_direction==3)// if previous direction is negative x axis\r\n                          x_cord[beats-1]+=10;\r\n                          else // if previous direction is posiive x axis\r\n                          x_cord[beats-1]-=10;\r\n                          \r\n                          changedirection=false\r\n                          previous_direction=4;\r\n                            }\r\n                        \r\n                      for (let index = 0; index < beats; index++) {\r\n                        if(index==beats-1){\r\n                          \r\n                      y_cord[beats-1]+=speed;\r\n                      \r\n                        }\r\n                        else if(index+1==beats-1){\r\n                          \r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1]-10;\r\n                            \r\n                        }\r\n              \r\n                        else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                            \r\n                      }\r\n                \r\n                      }\r\n                        \r\n\r\n                      changedirection=false;\r\n                      break;\r\n\r\n\r\n                  \r\n                    default:\r\n                      break;\r\n                  }\r\n                }\r\n                \r\n    // if collided with canvas walls print message\r\n                else if (collide){\r\n                  p5.textSize(26);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Oops, Try again',window.innerWidth*0.6/2,70)\r\n                  p5.textAlign(p5.LEFT,p5.TOP);\r\n                  \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Retry ↻',20,20)\r\n                }\r\n                \r\n    // if get the wrong answer\r\n                else if(!answer){\r\n                  p5.textSize(26);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Wrong answer ✘',window.innerWidth*0.6/2,70)\r\n                  p5.textAlign(p5.LEFT,p5.TOP);\r\n                  \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Retry ↻',20,20)\r\n                }\r\n                \r\n    // if no answer remains\r\n                else if(!answers_remainig){\r\n                  p5.textSize(26);\r\n                  p5.fill(0,153,0);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('You Won ✓',window.innerWidth*0.6/2,70)\r\n                }\r\n  } \r\n\r\n  const getMouseClick=(p5)=>{\r\n    let mouse_x;\r\n    let mouse_y;\r\n    \r\n    //  get the mouse axis\r\n    if(p5.mouseIsPressed==true){\r\n        mouse_x=p5.mouseX;        \r\n        mouse_y=p5.mouseY;\r\n    }\r\n    \r\n    // if pressed on retry or play again\r\n    if((!answer||collide)&&mouse_x>20&&mouse_y>20&&mouse_x<100&&mouse_y<40)\r\n    {\r\n      for (let i = 0; i < 10; i++) {\r\n         \r\n         food[i]. x_cord=p5.floor(p5.random(10, (window.innerWidth *0.6) / 10)) * 10\r\n         food[i]. y_cord=p5.floor(p5.random(10, (window.innerHeight *0.75) / 10)) * 10\r\n         food[i]. number=p5.floor(p5.random(10, 99)) \r\n         \r\n        \r\n      }\r\n      collide=false\r\n      answer=true\r\n      \r\n      //reset the original direction and position\r\n\t  x_start = 200;\r\n\t  y_start = 200;\r\n    direction=1\r\n    for (let i = beats; i > 0; i--) {\r\n      if(i==1)\r\n      x_cord[i]=(x_start+10)\r\n      else\r\n     x_cord[i]=(x_start-i);\r\n     y_cord[i]=(y_start)\r\n      \r\n    }\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  const keyPressed=(p5)=> {\r\n    \r\n    // check which key is pressed\r\n    if (p5.keyCode === p5.LEFT_ARROW) {\r\n      if(direction!==1&&direction!==3){\r\n      direction=3;\r\n      changedirection=true;}\r\n    } else  if (p5.keyCode === p5.RIGHT_ARROW) \r\n      {\r\n        if(direction!==3&&direction!==1){\r\n        direction=1;\r\n        \r\n      changedirection=true;}\r\n    }\r\n    else  if (p5.keyCode === p5.UP_ARROW) \r\n      {\r\n        if(direction!==4&&direction!==2){ \r\n        direction=2;\r\n      \r\n        changedirection=true;  \r\n      }\r\n      \r\n    }\r\n    else  if (p5.keyCode === p5.DOWN_ARROW) \r\n      {\r\n        if(direction!==2&&direction!==4){\r\n        direction=4;\r\n        \r\n      changedirection=true;\r\n      }\r\n    }\r\n  }\r\n\r\n\treturn  <Sketch setup={setup} \r\n  draw={draw} \r\n  keyPressed={keyPressed} \r\n  style={\r\n    {\r\n      justifyContent:'center',\r\n      alignItems:'center',\r\n      alignContent:'center',\r\n      backgroundColor:'#FFF1D0',\r\n    }\r\n  }\r\n  />;\r\n};","/Users/user/Desktop/funmath-frontend/src/games/game6.js",["231","232","233","234","235","236","237","238"],"import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nlet shape = []; //shapes array contain multiple shapes\r\nlet speed = 1  // speed from which they comes down\r\nlet score = 0\r\nlet answer = true;  // if previous answer is true\r\nlet ques_shape = 1;   // correct answer shape\r\nlet change_ques = false  // to change the question\r\nlet next_shapes = false;   // setup the next shape\r\nlet dropped = false      // if correct shape is dropped\r\nlet start = true\r\n\r\nexport default (props) => {\r\n\r\n\r\n    const setup = (p5, canvasParentRef) => {\r\n        // use parent to render the canvas in this ref\r\n        // (without that p5 will render the canvas outside of your component)\r\n        p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n    };\r\n\r\n    const draw = (p5) => {\r\n\r\n\r\n\r\n        if (start) {\r\n            setupstart(p5)   // runs only first time\r\n        }\r\n        p5.background(255, 241, 208);\r\n\r\n        shapes(p5)   // display the shapes \r\n        getMouseClick(p5)  // get the mouse tap\r\n        questions_and_answers(p5);  //display the shapes\r\n\r\n        moveShapes(p5)  // move the shapes\r\n    };\r\n\r\n\r\n    const setupstart = (p5) => {\r\n        // runs only first time\r\n\r\n        // assign the shapes in the shape array with their position coordinates\r\n        for (let i = 1; i <= 3; i++) {\r\n            shape.push({\r\n                'x_cord': i === 1 ? window.innerWidth * 0.1 : i === 2 ? window.innerWidth * 0.3 : window.innerWidth * 0.5,\r\n                'y_cord': 10,\r\n                'shape': p5.floor(p5.random(1, 7))\r\n            })\r\n\r\n        }\r\n        //correct answer shape\r\n        ques_shape = p5.floor(p5.random(1, 7))\r\n\r\n        //adding the correct shape in the options\r\n        let ans = p5.floor(p5.random(1, 4))\r\n        for (let i = 0; i < 3; i++) {\r\n            if (i === ans - 1)\r\n                shape[i].shape = ques_shape\r\n        }\r\n        start = false\r\n\r\n    }\r\n    const questions_and_answers = (p5) => {\r\n\r\n        let shape_name;\r\n        // if question is changes or selcted the right answer\r\n        if (change_ques && next_shapes) {\r\n            ques_shape = p5.floor(p5.random(1, 7))\r\n            let ans = p5.floor(p5.random(1, 4))\r\n\r\n            //asign shapes to the option\r\n            for (let i = 0; i < 3; i++) {\r\n                if (shape[i]) {\r\n                    if (i === 0)\r\n                        shape[i].x_cord = window.innerWidth * 0.1;\r\n                    else if (i === 1)\r\n                        shape[i].x_cord = window.innerWidth * 0.3;\r\n                    else\r\n                        shape[i].x_cord = window.innerWidth * 0.5;\r\n\r\n                    shape[i].y_cord = 10;\r\n                    shape[i].shape = p5.floor(p5.random(1, 7));\r\n\r\n                }\r\n                //            adding new option if right answer is tapped and removed\r\n                else {\r\n                    shape.push({\r\n                        'x_cord': i === 0 ? window.innerWidth * 0.1 : i === 1 ? window.innerWidth * 0.3 : window.innerWidth * 0.5,\r\n                        'y_cord': 10,\r\n                        'shape': p5.floor(p5.random(1, 7))\r\n                    })\r\n                }\r\n                if (i === ans - 1)\r\n                    shape[i].shape = ques_shape\r\n            }\r\n\r\n            change_ques = false\r\n            next_shapes = true\r\n        }\r\n        // questions shapes with reference to their assign number\r\n        switch (ques_shape) {\r\n            case 1:\r\n                shape_name = 'Triangle'\r\n                break;\r\n            case 2:\r\n\r\n                shape_name = 'Half Circle'\r\n                break;\r\n            case 3:\r\n\r\n                shape_name = 'Square'\r\n                break;\r\n            case 4:\r\n\r\n                shape_name = 'Rectangle'\r\n                break;\r\n            case 5:\r\n\r\n                shape_name = 'Circle'\r\n                break;\r\n            case 6:\r\n\r\n                shape_name = 'Ellipse'\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        p5.noStroke();\r\n        p5.fill(255, 241, 208)\r\n        p5.rect(0, 0, window.innerWidth, 60)\r\n\r\n        // Display the question\r\n        p5.textSize(26);\r\n        p5.fill(0, 102, 153);\r\n        p5.textAlign(p5.CENTER, p5.TOP);\r\n        \r\n   p5 .textFont('Cursive')\r\n        p5.text('Task :: Tap the ' + shape_name + ' shape', (window.innerWidth * 0.6) / 2, 20);\r\n\r\n\r\n        // Display the score\r\n        p5.fill('#C22A85');\r\n        p5.textAlign(p5.RIGHT, p5.TOP);\r\n        \r\n   p5 .textFont('Cursive')\r\n        p5.text('Score : ' + score + '   ', (window.innerWidth * 0.6), 20);\r\n\r\n\r\n    }\r\n\r\n    const moveShapes = (p5) => {\r\n\r\n        // if previous answer is true and the shape is not dropped\r\n        if (answer && !dropped) {\r\n            shape.forEach(element => {\r\n\r\n\r\n                //            moves the y axis of the all shapes \r\n                element.y_cord += speed\r\n                if (element.y_cord > window.innerHeight) {\r\n                    //if shapes goes in the bottom of the canvas\r\n\r\n                    if (ques_shape === element.shape) {\r\n                        //if answer is dropped\r\n                        dropped = true\r\n                        answer = false\r\n                        change_ques = true\r\n                        next_shapes = true\r\n                    }\r\n                    else {\r\n                        // resetting their position \r\n                        element.y_cord = 0\r\n                        element.shape = p5.floor(p5.random(1, 7))\r\n                        next_shapes = true\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n        else if (!answer && dropped == false) {\r\n            // if the answer is wrong :: Display the wrong msg\r\n            p5.textSize(26);\r\n            p5.fill(157, 0, 0);\r\n            p5.textAlign(p5.CENTER, p5.TOP);\r\n            p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 70)\r\n            p5.fill('#C22A85');\r\n            p5.textAlign(p5.LEFT, p5.TOP);\r\n            p5.text('Retry ↻', 20, 20)\r\n        }\r\n        else if (dropped && !answer) {\r\n            // If the right answer shape is dropped ::display the msg\r\n            p5.textSize(26);\r\n\r\n            p5.fill(157, 0, 0);\r\n            p5.textAlign(p5.CENTER, p5.TOP);\r\n            \r\n   p5 .textFont('Cursive')\r\n            p5.text('Oops shape dropped ✘', window.innerWidth * 0.6 / 2, 70)\r\n            p5.fill('#C22A85');\r\n            p5.textAlign(p5.LEFT, p5.TOP);\r\n            \r\n   p5 .textFont('Cursive')\r\n            p5.text('Retry ↻', 20, 20)\r\n        }\r\n\r\n    }\r\n    const shapes = (p5) => {\r\n\r\n        // Sketch each shape and fill seprate color\r\n        p5.fill('#222')\r\n\r\n        shape.forEach(elemen => {\r\n            if (elemen.shape === 1) {\r\n\r\n                //                ---------------*****  Triangle   ****---------------------\r\n                p5.stroke(1)\r\n                p5.fill('#686DA7')\r\n                p5.triangle(elemen.x_cord, elemen.y_cord, elemen.x_cord + 50, elemen.y_cord + 50, elemen.x_cord, elemen.y_cord + 50)\r\n                // p5.line(elemen.x_cord,elemen.y_cord,elemen.x_cord+50,elemen.y_cord+50);\r\n                // p5.line(elemen.x_cord,elemen.y_cord,elemen.x_cord,elemen.y_cord+50);\r\n                // p5.line(elemen.x_cord,elemen.y_cord+50,elemen.x_cord+50,elemen.y_cord+50);\r\n            }\r\n            else if (elemen.shape === 2) {\r\n\r\n                //                ---------------*****  half circle   ****---------------------\r\n                p5.fill('#681346')\r\n                p5.arc(elemen.x_cord, elemen.y_cord + 25, 50, 50, p5.PI, 0, p5.CHORD);\r\n            }\r\n            else if (elemen.shape === 3) {\r\n\r\n                //                ---------------*****  square   ****---------------------\r\n                p5.fill('#4633FF')\r\n                p5.rect(elemen.x_cord, elemen.y_cord, 50, 50);\r\n            }\r\n            else if (elemen.shape === 4) {\r\n\r\n                //                ---------------*****  rectangle   ****---------------------\r\n                p5.fill('#FF5733')\r\n                p5.rect(elemen.x_cord, elemen.y_cord, 80, 50);\r\n            } else if (elemen.shape === 5) {\r\n                //                ---------------*****  circle   ****---------------------\r\n                p5.fill('#33FF36')\r\n                p5.circle(elemen.x_cord, elemen.y_cord + 25, 50, 50);\r\n            } else if (elemen.shape === 6) {\r\n                //                ---------------*****  ellipse   ****---------------------\r\n                p5.fill('#3396FF')\r\n                p5.ellipse(elemen.x_cord, elemen.y_cord + 25, 80, 50);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const getMouseClick = (p5) => {\r\n        // ge the mouse click position\r\n        let mouse_x;\r\n        let mouse_y;\r\n        if (p5.mouseIsPressed == true) {\r\n            mouse_x = p5.mouseX;\r\n            mouse_y = p5.mouseY;\r\n        }\r\n\r\n        if (answer) {\r\n            shape.forEach(element => {\r\n                if (mouse_x > element.x_cord - 25 && mouse_y > element.y_cord - 25) { // if mouse is tapped on the shape \r\n                    switch (element.shape) {\r\n                        case 1:    // if the shape is triangle\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {// check the ques shape\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);    // remove frrom the display\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 2:   /// if the shape is half circle\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 3:// if the shape is square\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 4:// if the shape is rectangle\r\n                            if (p5.mouseX < element.x_cord + 80 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 5:// if the shape is circle\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 6:// if the shape is ellipse\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        else if (!answer) {\r\n            // if tapped on retry \r\n            if (mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\r\n                answer = true\r\n                dropped = false\r\n                score = 0\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return <Sketch setup={setup}\r\n        draw={draw}\r\n        style={\r\n            {\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                alignContent: 'center',\r\n\r\n            }\r\n        }\r\n    />;\r\n};","/Users/user/Desktop/funmath-frontend/src/games/game9.js",["239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254"],"import { getQueriesForElement } from \"@testing-library/react\";\r\nimport { Dropdown } from \"bootstrap\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\n\r\n\r\n\r\nlet start = true;   // only true when game runs first time\r\nlet restart = false;  // for retry in case of wrong answer\r\nlet playagain = false;  // for play again in case in winning\r\nlet balls = []   // total number of balls or apple array\r\nlet answer = true   // if answer is true... false if answr is wrong \r\nlet answer_remaining = true // true if answer is remaining\r\nlet tap = false  //true when we tap and hold the ball\r\nlet moving_ball  // true when moves the ball\r\n\r\nlet radius = 32   //radius of baseket hoop\r\n// hoop coordinates\r\nlet hoopX = 100    \r\nlet hoopY = 150\r\nlet score=0\r\n\r\nexport default (props) => {\r\n\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    // use parent to render the canvas in this ref\r\n    // (without that p5 will render the canvas outside of your component)\r\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n\r\n  };\r\n\r\n  const draw = (p5) => {\r\n\r\n    p5.background(255, 241, 208);  // background canvas color\r\n    \r\n    // execute when game runs first time\r\n    if (start) {\r\n      startSetup(p5)\r\n    }\r\n    \r\n    // execute when  retry or playagain\r\n    \r\n    if (restart) {\r\n      restartSetup(p5)\r\n    }\r\n\r\n\r\n    showBalls(p5)          // display all the balls or apples\r\n    getmousetap(p5)        // get the mouse click and pick the apple\r\n    dropball(p5)            // drop he apples\r\n    questionandanswer(p5)    //display the questions and their answers\r\n    hoop(p5)                  // display the baskets\r\n  };\r\n\r\n  const hoop = (p5) => {\r\n\r\n\r\n\r\n    //Set the coodinates of the two baskets on right and left end\r\n    for (let index = 0; index < 2; index++) {\r\n\r\n      if (index === 0) {\r\n            //Left end\r\n        hoopX = 60\r\n        hoopY = window.innerHeight * 0.75 - 100\r\n      }\r\n      else {\r\n          //Right end\r\n        hoopX = window.innerWidth * 0.60 - 60\r\n        hoopY = window.innerHeight * 0.75 - 100\r\n      }\r\n\r\n        // design the Basket \r\n\r\n      p5.noFill()\r\n      p5.stroke(0);\r\n      p5.strokeWeight(4);\r\n      p5.stroke(255, 140, 0);\r\n      p5.ellipse(hoopX, hoopY, radius * 3, radius / 2)\r\n      p5.stroke(0)\r\n      p5.fill(0, 0, 0)\r\n      // p5.quad(hoopX - radius*3/2 - radius/5, hoopY-radius/5, hoopX - radius*3/2 + radius*0.75 - radius/5, hoopY + radius/5, hoopX - radius*3/2 + radius*0.75 - radius/5, hoopY - radius*3 + radius/5, hoopX - radius*3/2 - radius/5, hoopY - radius*3 - radius/5)\r\n      ///  p5. line(hoopX - radius*3/2 + radius/10, hoopY, hoopX - radius*3/2 + radius/10,y_start+radius)\r\n      //rect(hoopX + radius*3/2,hoopY-radius*3, radius*0.75, radius*3)\r\n      p5.noFill()\r\n      //circle(440,100,5)\r\n      p5.stroke(255)\r\n      // line(440,100, 540,200)\r\n      // line(560, 100, 460, 200)\r\n      p5.stroke(0)\r\n\r\n      p5.strokeWeight(1);\r\n\r\n      p5.stroke(100)\r\n      p5.strokeWeight(4);\r\n      p5.line(hoopX - radius * 3 / 2, hoopY, hoopX - radius, hoopY + 3 * radius)\r\n      p5.line(hoopX + radius, hoopY + 3 * radius, hoopX + radius * 3 / 2, hoopY)\r\n      p5.line(hoopX + radius * 3 / 2, hoopY, (hoopX - radius * 3 / 2 + hoopX - radius) / 2, hoopY + radius * 3 / 2)\r\n      p5.line(hoopX - radius * 3 / 2, hoopY, (hoopX + radius * 3 / 2 + hoopX + radius) / 2, hoopY + radius * 3 / 2)\r\n      p5.line((hoopX - radius * 3 / 2 + hoopX - radius) / 2, hoopY + radius * 3 / 2, hoopX + radius, hoopY + 3 * radius)\r\n      p5.line((hoopX + radius * 3 / 2 + hoopX + radius) / 2, hoopY + radius * 3 / 2, hoopX - radius, hoopY + 3 * radius)\r\n      p5.stroke(0)\r\n      p5.strokeWeight(1)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const questionandanswer = (p5) => {\r\n\r\n\r\n    //display the questions\r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n    p5.textAlign(p5.CENTER, p5.CENTER);\r\n    \r\n   p5 .textFont('Cursive')\r\n    p5.text('Task :: Pick and Throw the apple in \\nright basket', (window.innerWidth * 0.6) / 2, 40);\r\n\r\n\r\n\r\n    // check if thre's any apple on the screen\r\n    balls.forEach(element => {\r\n      if (element.x_cord > 0 && element.y_cord > 0 && answer) {\r\n        answer_remaining = true\r\n      }\r\n    });\r\n\r\n\r\n    // if there's no apple on the screen and will display the win message\r\n    if (!answer_remaining) {\r\n      p5.textSize(26);\r\n      p5.fill(0, 153, 0);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('You Won ✓', window.innerWidth * 0.6 / 2, 80)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Play again ↻', 20, 20)\r\n      playagain = true\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  const dropball = (p5) => {\r\n\r\n\r\n\r\n    balls.forEach(element => {\r\n\r\n      // check if the apple dropes in he left basket with their coordinates\r\n      if (element.x_cord > 0 && element.x_cord < 120 && element.y_cord > window.innerHeight * 0.75 - 120 && element.y_cord < window.innerHeight * 0.75) {\r\n        {\r\n          element.x_cord = -200;\r\n          element.y_cord = -200;\r\n\r\n          //check if the answer is true\r\n          if (element.number > 5)\r\n            answer = false\r\n          else {\r\n            \r\n            //increase the score\r\n            score++\r\n\r\n            answer_remaining = false\r\n          }\r\n\r\n        }\r\n      }\r\n\r\n\r\n      // check if the apple dropes in the right basket with their coordinates\r\n      else if (element.x_cord > window.innerWidth * 0.60 - 120 && element.x_cord < window.innerWidth * 0.60 && element.y_cord > window.innerHeight * 0.75 - 120 && element.y_cord < window.innerHeight * 0.75) {\r\n        {\r\n          element.x_cord = -200;\r\n          element.y_cord = -200;\r\n          \r\n          //check if the answer is true\r\n          if (element.number < 5)\r\n            answer = false\r\n          else {\r\n            //increase the score\r\n            score++;\r\n            answer_remaining = false\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n  const getmousetap = (p5) => {\r\n\r\n    let mouse_x;\r\n    let mouse_y;\r\n    //get the mouse tap and their x and y cordinates\r\n    if (p5.mouseIsPressed == true) {\r\n      mouse_x = p5.mouseX;\r\n      mouse_y = p5.mouseY;\r\n    }\r\n\r\n    // Check if the  previos answer is true \r\n    if (answer && !playagain) {\r\n     \r\n\r\n      //check all the apples which apples is tappes from their coordinates\r\n      balls.forEach(element => {\r\n        if (!tap && mouse_x > element.x_cord - 25 && mouse_x < element.x_cord + 25 && mouse_y > element.y_cord - 25 && mouse_y < element.y_cord + 25) {\r\n\r\n\r\n\r\n          const index = balls.indexOf(element);\r\n       //   if tapped get the index of apple a\r\n          if (index > -1) {\r\n            moving_ball = index\r\n          }\r\n          tap = true\r\n        }\r\n      });\r\n    }\r\n\r\n    // check if play again or retry is pressed from their coordinates\r\n    else if ((playagain || !answer) && mouse_x > 20 && mouse_x < 120\r\n      && mouse_y > 20 && mouse_y < 40) {\r\n      restart = true\r\n      answer = true\r\n      playagain = false\r\n      score = 0\r\n    }\r\n\r\n    // check if previous answer is wrong then display wrong answer message\r\n    else if (!answer) {\r\n      p5.fill(157, 0, 0);\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 75)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n  }\r\n\r\n  const showBalls = (p5) => {\r\n\r\n    p5.fill('#000')\r\n    // p5.circle(0,(window.innerHeight*0.75),300,300)\r\n    // p5.circle((window.innerWidth*0.6),(window.innerHeight*0.75/1),300 ,300)\r\n \r\n      // Draw all the apples\r\n    balls.forEach(element => {\r\n      p5.fill('#ADC5' + element.color + '1'\r\n      )\r\n      drawApple(p5, element.x_cord, element.y_cord)\r\n    });\r\n\r\n    p5.fill('#555')\r\n    p5.text('< 5', 60, window.innerHeight * 0.75 - 130)\r\n    p5.text('> 5', window.innerWidth * 0.60 - 60, window.innerHeight * 0.75 - 130)\r\n\r\n\r\n    // Draw all the numbers on the apples\r\n    balls.forEach(element => {\r\n      p5.fill('#fff')\r\n      p5.text(element.number, element.x_cord, element.y_cord)\r\n    });\r\n\r\n\r\n  }\r\n\r\n  function drawApple(p5, x, y) {\r\n\r\n    // The apples Sketch\r\n    p5.noStroke();\r\n    p5.push();\r\n    p5.translate(x, y);\r\n    p5.fill(204, 55, 51);\r\n    p5.ellipseMode(p5.CENTER);\r\n    p5.ellipse(0, 0, 60, 55);\r\n    p5.stroke(78, 38, 0);\r\n    p5.strokeWeight(5);\r\n    p5.line(-5, -45, 0, -25);\r\n    p5.noStroke();\r\n    p5.rotate(p5.radians(-30));\r\n    p5.fill(39, 166, 21);\r\n    p5.ellipse(7, -33, 15, 25)\r\n    p5.pop();\r\n  }\r\n\r\n  const restartSetup = (p5) => {\r\n\r\n    // When play again or retry is pressed\r\n    let j = 0\r\n    for (let i = 0; i < 9; i++) {\r\n\r\n      if (i == 5) {\r\n        j++;\r\n      }\r\n      //all the apples get the cordinates and and their numbers in array\r\n      balls[i].x_cord = window.innerWidth * 0.6 - (60 * (j + 1))//:window.innerWidth*0.6/2+100,\r\n      balls[i].y_cord = i % 2 == 0 ? window.innerHeight * 0.75 / 2 - 100 : window.innerHeight * 0.75 / 2\r\n      balls[i].color = p5.floor(p5.random(1, 5))\r\n      balls[i].number = j\r\n\r\n\r\n\r\n      j++;\r\n\r\n    }\r\n    restart = false\r\n  }\r\n  const startSetup = (p5) => {\r\n\r\n    // Executes only first time to push the array with new numbers and coordinates\r\n    for (let i = 0; i < 10; i++) {\r\n\r\n      if (i == 5) {\r\n\r\n      } else {\r\n        balls.push({\r\n\r\n          'x_cord': window.innerWidth * 0.6 - (60 * (i + 1)),//:window.innerWidth*0.6/2+100,\r\n          'y_cord': i % 2 == 0 ? window.innerHeight * 0.75 / 2 - 100 : window.innerHeight * 0.75 / 2,\r\n          'color': p5.floor(p5.random(1, 5)),\r\n          'number': i\r\n\r\n        })\r\n      }\r\n\r\n    }\r\n    start = false\r\n  }\r\n\r\n  const mouseDragged = (p5) => {\r\n    let mouse_x = p5.mouseX;\r\n    let mouse_y = p5.mouseY;\r\n\r\n    // when is mouse is moving and is grabbing the apple\r\n    if (answer) {\r\n      balls.forEach(element => {\r\n        const index = balls.indexOf(element);\r\n        if (index > -1) {\r\n          if (tap && index === moving_ball) {\r\n            //is taped the ball assign the mouse cordinates to the apple\r\n            element.x_cord = mouse_x;\r\n            element.y_cord = mouse_y\r\n          }\r\n\r\n        }\r\n\r\n\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  const mouseReleased = () => {\r\n    // when mouse is released\r\n    tap = false\r\n  }\r\n\r\n\r\n  return <Sketch setup={setup}\r\n    draw={draw}\r\n    mouseDragged={mouseDragged}\r\n    mouseReleased={mouseReleased}\r\n\r\n\r\n  />;\r\n};","/Users/user/Desktop/funmath-frontend/src/games/game8.js",["255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279"],"import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\n// Coordinates from where the snake starts\r\nlet x_start = 200;\r\nlet y_start = 200;\r\n// x and y cordinates array of the beads of snake \r\nlet x_cord = [];\r\nlet y_cord = [];\r\n// total beads of snake\r\nlet beats = 100;\r\n// Direction of snake \r\n//  1==>right\r\n// 2==> upwards\r\n// 3==>left\r\n// 4==>Down\r\nlet direction = 1;\r\nlet speed = 1;  //speed of snake\r\nlet changedirection = false;  // for changing the direction\r\nlet previous_direction = 2;\r\nlet collide = false;   //if snake collides with the outer walls\r\nlet food = [] // food array \r\nlet answer = true\r\nlet answers_remainig = true\r\nlet start = true\r\n\r\n\r\nexport default (props) => {\r\n\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    // use parent to render the canvas in this ref\r\n    // (without that p5 will render the canvas outside of your component)\r\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n\r\n  };\r\n\r\n  const draw = (p5) => {\r\n\r\n\r\n    if (start) {\r\n      setupstart(p5)   ///Runs only first time\r\n    }\r\n\r\n    p5.background(255, 241, 208);\r\n\r\n\r\n    update_snake(p5);  //moves the snake \r\n    update_direction(p5);   // updates the direction if changed\r\n    check_collider();    //checks if snakes collide\r\n    questions_and_answers(p5);   //dispaly the questions ans answrs\r\n\r\n\r\n    getMouseClick(p5) /// get the mouse click on the retry\r\n\r\n\r\n  };\r\n\r\n  const setupstart = (p5) => {\r\n\r\n\r\n\r\n// First times push the food array with cordinates and the number \r\n    for (let i = beats; i > 0; i--) {\r\n      if (i == 1)\r\n        x_cord.push(x_start + 10)\r\n      else\r\n        x_cord.push(x_start - i);\r\n      y_cord.push(y_start)\r\n\r\n    }\r\n\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      food.push({\r\n        'x_cord': p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10,\r\n        'y_cord': p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10,\r\n        'number': p5.floor(p5.random(10, 99)),\r\n      })\r\n\r\n    }\r\n    start = false\r\n  }\r\n\r\n\r\n  const check_collider = () => {\r\n    let snake_head_x = x_cord[beats - 1];\r\n    let snake_head_y = y_cord[beats - 1];\r\n\r\n//// Check if the snake collide with the canvas walls\r\n    if (snake_head_x < 0 || snake_head_x > window.innerWidth * 0.60 || snake_head_y < 0 || snake_head_y > window.innerHeight * 0.75) {\r\n      collide = true\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      // Checks if the snake head collide with any food in array\r\n      if ((snake_head_x > element.x_cord - 15 && snake_head_x < element.x_cord + 15) && (snake_head_y > element.y_cord - 15 && snake_head_y < element.y_cord + 15)) {\r\n\r\n\r\n        // logic to get the minimum number\r\n        let min = 100;\r\n        food.forEach(xelement => {\r\n          if (min > xelement.number)\r\n            min = xelement.number\r\n        });\r\n        // check if the snake get the right answer food\r\n        if (element.number != min)\r\n          answer = false\r\n        else {\r\n\r\n          // const index = food.indexOf(element);\r\n          // if (index > -1) {\r\n          //   food.splice(index, 1);\r\n          // }\r\n          // answers_remainig=false;\r\n\r\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\r\n          // and appears as the snake eated it \r\n          element.x_cord = -11\r\n          element.y_cord = -11\r\n          element.number = 111;\r\n          answers_remainig = false;\r\n        }\r\n      } else {\r\n\r\n      }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  const questions_and_answers = (p5) => {\r\n    // Display the questions \r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n    p5.textAlign(p5.CENTER, p5.TOP);\r\n    \r\n   p5 .textFont('Cursive')\r\n    p5.text('Task :: Let the snake eat the numbers in\\n Ascending order ', (window.innerWidth * 0.6) / 2, 10);\r\n\r\n    // display all the numbers on the food present in the array \r\n    for (let i = 0; i < food.length; i++) {\r\n      p5.fill(255, 128, 0);\r\n      p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\r\n      p5.textSize(20);\r\n      p5.fill(0, 102, 153)\r\n\r\n      p5.textAlign(p5.CENTER, p5.CENTER);\r\n      p5.text(food[i].number, food[i].x_cord, food[i].y_cord)\r\n\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      // check if the answer is remaining\r\n      if (element.number < 100)\r\n        answers_remainig = true\r\n    });\r\n\r\n  }\r\n\r\n  const update_snake = (p5) => {\r\n    //p5.noStroke();        \r\n    /// Updates the snake position \r\n    p5.fill(157, 0, 0);\r\n    for (let index = 0; index < beats; index++) {\r\n      p5.circle(x_cord[index], y_cord[index], 10, 10);\r\n    }\r\n  }\r\n  const update_direction = (p5) => {\r\n \r\n    // if the snake present in the canvas and there's answer present there\r\n    if (!collide && answer && answers_remainig) {\r\n      switch (direction) {\r\n\r\n        // case 1 is the direcion in the right\r\n        case 1:\r\n          {\r\n            if (changedirection) { // if direction is changed from previous direction\r\n              x_cord[beats - 1] += 10;\r\n              if (previous_direction == 2) // if previous direction is positive y axis\r\n                y_cord[beats - 1] += 10;\r\n              else                        // if previous Direction is negative y axis\r\n                y_cord[beats - 1] -= 10;\r\n\r\n              changedirection = false;\r\n              previous_direction = 1;\r\n            }\r\n            for (let index = 0; index < beats; index++) {\r\n              if (index == beats - 1) {\r\n\r\n                x_cord[beats - 1] += speed; // every snake bead get the position of its warly bead\r\n              }\r\n              else if (index == beats - 2) {\r\n\r\n                x_cord[index] = x_cord[index + 1] - 10;  // the head space of snake\r\n                y_cord[index] = y_cord[index + 1];\r\n\r\n              }\r\n\r\n              else {\r\n                x_cord[index] = x_cord[index + 1]; // every snake bead get the position of its early bead\r\n                y_cord[index] = y_cord[index + 1];\r\n\r\n              }\r\n\r\n            }\r\n\r\n\r\n\r\n            changedirection = false;\r\n          }\r\n          break;\r\n\r\n // case 2 is the direcion in the upwards\r\n        case 2:\r\n\r\n          if (changedirection) {// if direction is changed from previous direction\r\n            y_cord[beats - 1] -= 10;\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else\r\n              x_cord[beats - 1] -= 10;//if previous direction is positive x axis\r\n\r\n            changedirection = false\r\n            previous_direction = 2;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] -= speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] + 10;\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n\r\n\r\n          break;\r\n\r\n           // case 3 is the direcion in the left\r\n        case 3:\r\n\r\n\r\n\r\n          if (changedirection) {// if direction is changed from previous direction\r\n            x_cord[beats - 1] -= 10;\r\n            if (previous_direction == 2)// if previous direction is posiive y axis\r\n              y_cord[beats - 1] += 10;\r\n            else                //if previous direction is negative y axis\r\n              y_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false;\r\n            previous_direction = 3;\r\n          }\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              x_cord[beats - 1] -= speed;\r\n            }\r\n            else if (index == beats - 2) {\r\n\r\n              x_cord[index] = x_cord[index + 1] + 10;\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n           // case 4 is the direcion in the downwards\r\n        case 4:\r\n          if (changedirection) {// if direction is changed from previous direction\r\n            y_cord[beats - 1] += 10;\r\n\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else                        // if previous direction is posiive x axis\r\n              x_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false\r\n            previous_direction = 4;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] += speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] - 10;\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    // if collided with canvas walls print message\r\n    else if (collide) {\r\n      p5.textSize(26);\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Oops, Try again', window.innerWidth * 0.6 / 2, 70)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n    \r\n    // if get the wrong answer\r\n    else if (!answer) {\r\n      p5.textSize(26);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 70)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n\r\n    // if no answer remains\r\n    else if (!answers_remainig) {\r\n      p5.textSize(26);\r\n      p5.fill(0, 153, 0);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('You Won ✓', window.innerWidth * 0.6 / 2, 70)\r\n    }\r\n  }\r\n\r\n  const getMouseClick = (p5) => {\r\n    let mouse_x;\r\n    let mouse_y;\r\n    //  get the mouse axis\r\n    if (p5.mouseIsPressed == true) {\r\n      mouse_x = p5.mouseX;\r\n      mouse_y = p5.mouseY;\r\n    }\r\n\r\n    // if pressed on retry or play again\r\n    if ((!answer || collide) && mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\r\n      for (let i = 0; i < 10; i++) {\r\n\r\n        food[i].x_cord = p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10\r\n        food[i].y_cord = p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10\r\n        food[i].number = p5.floor(p5.random(10, 99))\r\n\r\n\r\n      }\r\n      collide = false\r\n      answer = true\r\n\r\n\r\n      //reset the original direction and position\r\n      x_start = 200;\r\n      y_start = 200;\r\n      direction = 1\r\n      for (let i = beats; i > 0; i--) {\r\n        if (i == 1)\r\n          x_cord[i] = (x_start + 10)\r\n        else\r\n          x_cord[i] = (x_start - i);\r\n        y_cord[i] = (y_start)\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const keyPressed = (p5) => {\r\n\r\n    // check which key is pressed\r\n    if (p5.keyCode === p5.LEFT_ARROW) {\r\n      if (direction !== 1 && direction !== 3) {\r\n        direction = 3;\r\n        changedirection = true;\r\n      }\r\n    } else if (p5.keyCode === p5.RIGHT_ARROW) {\r\n      if (direction !== 3 && direction !== 1) {\r\n        direction = 1;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n    else if (p5.keyCode === p5.UP_ARROW) {\r\n      if (direction !== 4 && direction !== 2) {\r\n        direction = 2;\r\n\r\n        changedirection = true;\r\n      }\r\n\r\n    }\r\n    else if (p5.keyCode === p5.DOWN_ARROW) {\r\n      if (direction !== 2 && direction !== 4) {\r\n        direction = 4;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return <Sketch setup={setup}\r\n    draw={draw}\r\n    keyPressed={keyPressed}\r\n    style={\r\n      {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        alignContent: 'center',\r\n        backgroundColor: '#FFF1D0',\r\n      }\r\n    }\r\n  />;\r\n};","/Users/user/Desktop/funmath-frontend/src/reducers/user.js",[],"/Users/user/Desktop/funmath-frontend/src/constants/index.js",[],{"ruleId":"280","severity":1,"message":"281","line":5,"column":25,"nodeType":"282","messageId":"283","endLine":5,"endColumn":30},{"ruleId":"280","severity":1,"message":"284","line":5,"column":32,"nodeType":"282","messageId":"283","endLine":5,"endColumn":38},{"ruleId":"280","severity":1,"message":"285","line":1,"column":17,"nodeType":"282","messageId":"283","endLine":1,"endColumn":26},{"ruleId":"280","severity":1,"message":"286","line":2,"column":27,"nodeType":"282","messageId":"283","endLine":2,"endColumn":33},{"ruleId":"280","severity":1,"message":"284","line":2,"column":35,"nodeType":"282","messageId":"283","endLine":2,"endColumn":41},{"ruleId":"280","severity":1,"message":"281","line":2,"column":43,"nodeType":"282","messageId":"283","endLine":2,"endColumn":48},{"ruleId":"280","severity":1,"message":"287","line":3,"column":23,"nodeType":"282","messageId":"283","endLine":3,"endColumn":32},{"ruleId":"280","severity":1,"message":"288","line":3,"column":34,"nodeType":"282","messageId":"283","endLine":3,"endColumn":38},{"ruleId":"280","severity":1,"message":"289","line":3,"column":40,"nodeType":"282","messageId":"283","endLine":3,"endColumn":43},{"ruleId":"280","severity":1,"message":"290","line":3,"column":45,"nodeType":"282","messageId":"283","endLine":3,"endColumn":48},{"ruleId":"280","severity":1,"message":"291","line":6,"column":9,"nodeType":"282","messageId":"283","endLine":6,"endColumn":15},{"ruleId":"280","severity":1,"message":"292","line":10,"column":9,"nodeType":"282","messageId":"283","endLine":10,"endColumn":20},{"ruleId":"280","severity":1,"message":"293","line":10,"column":21,"nodeType":"282","messageId":"283","endLine":10,"endColumn":28},{"ruleId":"280","severity":1,"message":"294","line":17,"column":12,"nodeType":"282","messageId":"283","endLine":17,"endColumn":19},{"ruleId":"280","severity":1,"message":"295","line":17,"column":20,"nodeType":"282","messageId":"283","endLine":17,"endColumn":28},{"ruleId":"296","severity":1,"message":"297","line":30,"column":19,"nodeType":"298","messageId":"299","endLine":30,"endColumn":21},{"ruleId":"280","severity":1,"message":"285","line":1,"column":17,"nodeType":"282","messageId":"283","endLine":1,"endColumn":26},{"ruleId":"280","severity":1,"message":"286","line":2,"column":27,"nodeType":"282","messageId":"283","endLine":2,"endColumn":33},{"ruleId":"280","severity":1,"message":"284","line":2,"column":35,"nodeType":"282","messageId":"283","endLine":2,"endColumn":41},{"ruleId":"280","severity":1,"message":"281","line":2,"column":43,"nodeType":"282","messageId":"283","endLine":2,"endColumn":48},{"ruleId":"280","severity":1,"message":"287","line":3,"column":23,"nodeType":"282","messageId":"283","endLine":3,"endColumn":32},{"ruleId":"280","severity":1,"message":"288","line":3,"column":34,"nodeType":"282","messageId":"283","endLine":3,"endColumn":38},{"ruleId":"280","severity":1,"message":"289","line":3,"column":40,"nodeType":"282","messageId":"283","endLine":3,"endColumn":43},{"ruleId":"280","severity":1,"message":"290","line":3,"column":45,"nodeType":"282","messageId":"283","endLine":3,"endColumn":48},{"ruleId":"296","severity":1,"message":"297","line":26,"column":21,"nodeType":"298","messageId":"299","endLine":26,"endColumn":23},{"ruleId":"280","severity":1,"message":"300","line":13,"column":10,"nodeType":"282","messageId":"283","endLine":13,"endColumn":14},{"ruleId":"301","severity":1,"message":"302","line":37,"column":17,"nodeType":"303","messageId":"304","endLine":37,"endColumn":23},{"ruleId":"301","severity":1,"message":"302","line":40,"column":21,"nodeType":"303","messageId":"304","endLine":40,"endColumn":27},{"ruleId":"301","severity":1,"message":"302","line":43,"column":25,"nodeType":"303","messageId":"304","endLine":43,"endColumn":31},{"ruleId":"301","severity":1,"message":"302","line":46,"column":29,"nodeType":"303","messageId":"304","endLine":46,"endColumn":35},{"ruleId":"301","severity":1,"message":"302","line":49,"column":33,"nodeType":"303","messageId":"304","endLine":49,"endColumn":39},{"ruleId":"301","severity":1,"message":"302","line":52,"column":37,"nodeType":"303","messageId":"304","endLine":52,"endColumn":43},{"ruleId":"301","severity":1,"message":"302","line":55,"column":41,"nodeType":"303","messageId":"304","endLine":55,"endColumn":47},{"ruleId":"301","severity":1,"message":"302","line":58,"column":45,"nodeType":"303","messageId":"304","endLine":58,"endColumn":51},{"ruleId":"301","severity":1,"message":"302","line":61,"column":45,"nodeType":"303","messageId":"304","endLine":61,"endColumn":51},{"ruleId":"305","severity":1,"message":"306","line":10,"column":19,"nodeType":"307","messageId":"308","endLine":10,"endColumn":20,"fix":"309"},{"ruleId":"310","severity":1,"message":"311","line":28,"column":1,"nodeType":"312","endLine":388,"endColumn":3},{"ruleId":"296","severity":1,"message":"297","line":66,"column":25,"nodeType":"298","messageId":"299","endLine":66,"endColumn":27},{"ruleId":"296","severity":1,"message":"297","line":112,"column":31,"nodeType":"298","messageId":"299","endLine":112,"endColumn":33},{"ruleId":"313","severity":1,"message":"314","line":118,"column":26,"nodeType":"315","messageId":"316","endLine":118,"endColumn":28},{"ruleId":"313","severity":1,"message":"314","line":119,"column":58,"nodeType":"315","messageId":"316","endLine":119,"endColumn":60},{"ruleId":"296","severity":1,"message":"297","line":125,"column":29,"nodeType":"298","messageId":"299","endLine":125,"endColumn":31},{"ruleId":"317","severity":1,"message":"318","line":184,"column":4,"nodeType":"307","messageId":"319","endLine":184,"endColumn":16,"fix":"320"},{"ruleId":"313","severity":1,"message":"321","line":287,"column":21,"nodeType":"315","messageId":"316","endLine":287,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":288,"column":21,"nodeType":"315","messageId":"316","endLine":288,"endColumn":23},{"ruleId":"313","severity":1,"message":"321","line":288,"column":21,"nodeType":"315","messageId":"316","endLine":288,"endColumn":23},{"ruleId":"313","severity":1,"message":"321","line":289,"column":73,"nodeType":"315","messageId":"316","endLine":289,"endColumn":75},{"ruleId":"313","severity":1,"message":"321","line":290,"column":25,"nodeType":"315","messageId":"316","endLine":290,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":290,"column":25,"nodeType":"315","messageId":"316","endLine":290,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":290,"column":80,"nodeType":"315","messageId":"316","endLine":290,"endColumn":82},{"ruleId":"313","severity":1,"message":"314","line":293,"column":21,"nodeType":"315","messageId":"316","endLine":293,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":308,"column":21,"nodeType":"315","messageId":"316","endLine":308,"endColumn":23},{"ruleId":"313","severity":1,"message":"321","line":309,"column":73,"nodeType":"315","messageId":"316","endLine":309,"endColumn":75},{"ruleId":"313","severity":1,"message":"314","line":310,"column":25,"nodeType":"315","messageId":"316","endLine":310,"endColumn":27},{"ruleId":"313","severity":1,"message":"321","line":310,"column":25,"nodeType":"315","messageId":"316","endLine":310,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":310,"column":87,"nodeType":"315","messageId":"316","endLine":310,"endColumn":89},{"ruleId":"313","severity":1,"message":"314","line":313,"column":21,"nodeType":"315","messageId":"316","endLine":313,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":328,"column":21,"nodeType":"315","messageId":"316","endLine":328,"endColumn":23},{"ruleId":"313","severity":1,"message":"321","line":329,"column":73,"nodeType":"315","messageId":"316","endLine":329,"endColumn":75},{"ruleId":"313","severity":1,"message":"321","line":330,"column":25,"nodeType":"315","messageId":"316","endLine":330,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":330,"column":25,"nodeType":"315","messageId":"316","endLine":330,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":330,"column":87,"nodeType":"315","messageId":"316","endLine":330,"endColumn":89},{"ruleId":"313","severity":1,"message":"314","line":333,"column":21,"nodeType":"315","messageId":"316","endLine":333,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":346,"column":21,"nodeType":"315","messageId":"316","endLine":346,"endColumn":23},{"ruleId":"313","severity":1,"message":"321","line":347,"column":73,"nodeType":"315","messageId":"316","endLine":347,"endColumn":75},{"ruleId":"313","severity":1,"message":"321","line":348,"column":25,"nodeType":"315","messageId":"316","endLine":348,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":348,"column":25,"nodeType":"315","messageId":"316","endLine":348,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":348,"column":87,"nodeType":"315","messageId":"316","endLine":348,"endColumn":89},{"ruleId":"313","severity":1,"message":"314","line":351,"column":21,"nodeType":"315","messageId":"316","endLine":351,"endColumn":23},{"ruleId":"317","severity":1,"message":"318","line":367,"column":4,"nodeType":"307","messageId":"319","endLine":367,"endColumn":16,"fix":"322"},{"ruleId":"317","severity":1,"message":"318","line":372,"column":4,"nodeType":"307","messageId":"319","endLine":372,"endColumn":16,"fix":"323"},{"ruleId":"280","severity":1,"message":"324","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":30},{"ruleId":"310","severity":1,"message":"311","line":28,"column":1,"nodeType":"312","endLine":446,"endColumn":3},{"ruleId":"296","severity":1,"message":"297","line":64,"column":13,"nodeType":"298","messageId":"299","endLine":64,"endColumn":15},{"ruleId":"296","severity":1,"message":"325","line":97,"column":32,"nodeType":"298","messageId":"299","endLine":97,"endColumn":34},{"ruleId":"317","severity":1,"message":"318","line":131,"column":4,"nodeType":"307","messageId":"319","endLine":131,"endColumn":16,"fix":"326"},{"ruleId":"296","severity":1,"message":"297","line":150,"column":30,"nodeType":"298","messageId":"299","endLine":150,"endColumn":32},{"ruleId":"327","severity":1,"message":"328","line":174,"column":11,"nodeType":"329","messageId":"330","endLine":203,"endColumn":12},{"ruleId":"296","severity":1,"message":"297","line":177,"column":38,"nodeType":"298","messageId":"299","endLine":177,"endColumn":40},{"ruleId":"296","severity":1,"message":"297","line":186,"column":25,"nodeType":"298","messageId":"299","endLine":186,"endColumn":27},{"ruleId":"296","severity":1,"message":"297","line":190,"column":30,"nodeType":"298","messageId":"299","endLine":190,"endColumn":32},{"ruleId":"296","severity":1,"message":"297","line":210,"column":36,"nodeType":"298","messageId":"299","endLine":210,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":219,"column":23,"nodeType":"298","messageId":"299","endLine":219,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":224,"column":32,"nodeType":"298","messageId":"299","endLine":224,"endColumn":34},{"ruleId":"296","severity":1,"message":"297","line":245,"column":36,"nodeType":"298","messageId":"299","endLine":245,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":254,"column":23,"nodeType":"298","messageId":"299","endLine":254,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":258,"column":28,"nodeType":"298","messageId":"299","endLine":258,"endColumn":30},{"ruleId":"296","severity":1,"message":"297","line":281,"column":36,"nodeType":"298","messageId":"299","endLine":281,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":291,"column":23,"nodeType":"298","messageId":"299","endLine":291,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":296,"column":32,"nodeType":"298","messageId":"299","endLine":296,"endColumn":34},{"ruleId":"317","severity":1,"message":"318","line":328,"column":4,"nodeType":"307","messageId":"319","endLine":328,"endColumn":16,"fix":"331"},{"ruleId":"317","severity":1,"message":"318","line":331,"column":7,"nodeType":"307","messageId":"319","endLine":331,"endColumn":19,"fix":"332"},{"ruleId":"317","severity":1,"message":"318","line":342,"column":4,"nodeType":"307","messageId":"319","endLine":342,"endColumn":16,"fix":"333"},{"ruleId":"317","severity":1,"message":"318","line":346,"column":4,"nodeType":"307","messageId":"319","endLine":346,"endColumn":16,"fix":"334"},{"ruleId":"317","severity":1,"message":"318","line":357,"column":4,"nodeType":"307","messageId":"319","endLine":357,"endColumn":16,"fix":"335"},{"ruleId":"296","severity":1,"message":"297","line":368,"column":27,"nodeType":"298","messageId":"299","endLine":368,"endColumn":29},{"ruleId":"296","severity":1,"message":"297","line":391,"column":15,"nodeType":"298","messageId":"299","endLine":391,"endColumn":17},{"ruleId":"280","severity":1,"message":"324","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":30},{"ruleId":"310","severity":1,"message":"311","line":28,"column":1,"nodeType":"312","endLine":455,"endColumn":3},{"ruleId":"296","severity":1,"message":"297","line":63,"column":13,"nodeType":"298","messageId":"299","endLine":63,"endColumn":15},{"ruleId":"296","severity":1,"message":"297","line":96,"column":32,"nodeType":"298","messageId":"299","endLine":96,"endColumn":34},{"ruleId":"296","severity":1,"message":"325","line":150,"column":30,"nodeType":"298","messageId":"299","endLine":150,"endColumn":32},{"ruleId":"327","severity":1,"message":"328","line":174,"column":11,"nodeType":"329","messageId":"330","endLine":208,"endColumn":12},{"ruleId":"296","severity":1,"message":"297","line":177,"column":38,"nodeType":"298","messageId":"299","endLine":177,"endColumn":40},{"ruleId":"296","severity":1,"message":"297","line":186,"column":25,"nodeType":"298","messageId":"299","endLine":186,"endColumn":27},{"ruleId":"296","severity":1,"message":"297","line":190,"column":30,"nodeType":"298","messageId":"299","endLine":190,"endColumn":32},{"ruleId":"296","severity":1,"message":"297","line":216,"column":36,"nodeType":"298","messageId":"299","endLine":216,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":226,"column":23,"nodeType":"298","messageId":"299","endLine":226,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":231,"column":32,"nodeType":"298","messageId":"299","endLine":231,"endColumn":34},{"ruleId":"296","severity":1,"message":"297","line":259,"column":36,"nodeType":"298","messageId":"299","endLine":259,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":268,"column":23,"nodeType":"298","messageId":"299","endLine":268,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":272,"column":28,"nodeType":"298","messageId":"299","endLine":272,"endColumn":30},{"ruleId":"296","severity":1,"message":"297","line":295,"column":36,"nodeType":"298","messageId":"299","endLine":295,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":305,"column":23,"nodeType":"298","messageId":"299","endLine":305,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":310,"column":32,"nodeType":"298","messageId":"299","endLine":310,"endColumn":34},{"ruleId":"296","severity":1,"message":"297","line":377,"column":27,"nodeType":"298","messageId":"299","endLine":377,"endColumn":29},{"ruleId":"296","severity":1,"message":"297","line":400,"column":15,"nodeType":"298","messageId":"299","endLine":400,"endColumn":17},{"ruleId":"280","severity":1,"message":"324","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":30},{"ruleId":"310","severity":1,"message":"311","line":27,"column":1,"nodeType":"312","endLine":472,"endColumn":3},{"ruleId":"296","severity":1,"message":"297","line":62,"column":11,"nodeType":"298","messageId":"299","endLine":62,"endColumn":13},{"ruleId":"296","severity":1,"message":"325","line":102,"column":28,"nodeType":"298","messageId":"299","endLine":102,"endColumn":30},{"ruleId":"317","severity":1,"message":"318","line":138,"column":4,"nodeType":"307","messageId":"319","endLine":138,"endColumn":16,"fix":"336"},{"ruleId":"327","severity":1,"message":"328","line":182,"column":19,"nodeType":"329","messageId":"330","endLine":216,"endColumn":20},{"ruleId":"296","severity":1,"message":"297","line":185,"column":40,"nodeType":"298","messageId":"299","endLine":185,"endColumn":42},{"ruleId":"296","severity":1,"message":"297","line":194,"column":31,"nodeType":"298","messageId":"299","endLine":194,"endColumn":33},{"ruleId":"296","severity":1,"message":"297","line":198,"column":36,"nodeType":"298","messageId":"299","endLine":198,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":224,"column":48,"nodeType":"298","messageId":"299","endLine":224,"endColumn":50},{"ruleId":"296","severity":1,"message":"297","line":234,"column":33,"nodeType":"298","messageId":"299","endLine":234,"endColumn":35},{"ruleId":"296","severity":1,"message":"297","line":239,"column":40,"nodeType":"298","messageId":"299","endLine":239,"endColumn":42},{"ruleId":"296","severity":1,"message":"297","line":268,"column":40,"nodeType":"298","messageId":"299","endLine":268,"endColumn":42},{"ruleId":"296","severity":1,"message":"297","line":277,"column":31,"nodeType":"298","messageId":"299","endLine":277,"endColumn":33},{"ruleId":"296","severity":1,"message":"297","line":281,"column":36,"nodeType":"298","messageId":"299","endLine":281,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":304,"column":46,"nodeType":"298","messageId":"299","endLine":304,"endColumn":48},{"ruleId":"296","severity":1,"message":"297","line":314,"column":33,"nodeType":"298","messageId":"299","endLine":314,"endColumn":35},{"ruleId":"296","severity":1,"message":"297","line":319,"column":40,"nodeType":"298","messageId":"299","endLine":319,"endColumn":42},{"ruleId":"317","severity":1,"message":"318","line":351,"column":4,"nodeType":"307","messageId":"319","endLine":351,"endColumn":16,"fix":"337"},{"ruleId":"317","severity":1,"message":"318","line":355,"column":4,"nodeType":"307","messageId":"319","endLine":355,"endColumn":16,"fix":"338"},{"ruleId":"317","severity":1,"message":"318","line":365,"column":4,"nodeType":"307","messageId":"319","endLine":365,"endColumn":16,"fix":"339"},{"ruleId":"317","severity":1,"message":"318","line":369,"column":4,"nodeType":"307","messageId":"319","endLine":369,"endColumn":16,"fix":"340"},{"ruleId":"317","severity":1,"message":"318","line":380,"column":4,"nodeType":"307","messageId":"319","endLine":380,"endColumn":16,"fix":"341"},{"ruleId":"296","severity":1,"message":"297","line":390,"column":25,"nodeType":"298","messageId":"299","endLine":390,"endColumn":27},{"ruleId":"317","severity":1,"message":"342","line":400,"column":10,"nodeType":"307","messageId":"319","endLine":400,"endColumn":25,"fix":"343"},{"ruleId":"317","severity":1,"message":"344","line":401,"column":10,"nodeType":"307","messageId":"319","endLine":401,"endColumn":25,"fix":"345"},{"ruleId":"317","severity":1,"message":"346","line":402,"column":10,"nodeType":"307","messageId":"319","endLine":402,"endColumn":25,"fix":"347"},{"ruleId":"296","severity":1,"message":"297","line":414,"column":11,"nodeType":"298","messageId":"299","endLine":414,"endColumn":13},{"ruleId":"280","severity":1,"message":"324","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":30},{"ruleId":"310","severity":1,"message":"311","line":15,"column":1,"nodeType":"312","endLine":445,"endColumn":3},{"ruleId":"317","severity":1,"message":"318","line":142,"column":4,"nodeType":"307","messageId":"319","endLine":142,"endColumn":16,"fix":"348"},{"ruleId":"317","severity":1,"message":"318","line":150,"column":4,"nodeType":"307","messageId":"319","endLine":150,"endColumn":16,"fix":"349"},{"ruleId":"296","severity":1,"message":"297","line":186,"column":37,"nodeType":"298","messageId":"299","endLine":186,"endColumn":39},{"ruleId":"317","severity":1,"message":"318","line":203,"column":4,"nodeType":"307","messageId":"319","endLine":203,"endColumn":16,"fix":"350"},{"ruleId":"317","severity":1,"message":"318","line":208,"column":4,"nodeType":"307","messageId":"319","endLine":208,"endColumn":16,"fix":"351"},{"ruleId":"296","severity":1,"message":"297","line":267,"column":31,"nodeType":"298","messageId":"299","endLine":267,"endColumn":33},{"ruleId":"280","severity":1,"message":"324","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":30},{"ruleId":"280","severity":1,"message":"352","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":18},{"ruleId":"310","severity":1,"message":"311","line":24,"column":1,"nodeType":"312","endLine":380,"endColumn":3},{"ruleId":"317","severity":1,"message":"318","line":120,"column":4,"nodeType":"307","messageId":"319","endLine":120,"endColumn":16,"fix":"353"},{"ruleId":"317","severity":1,"message":"318","line":138,"column":4,"nodeType":"307","messageId":"319","endLine":138,"endColumn":16,"fix":"354"},{"ruleId":"317","severity":1,"message":"318","line":142,"column":4,"nodeType":"307","messageId":"319","endLine":142,"endColumn":16,"fix":"355"},{"ruleId":"327","severity":1,"message":"356","line":159,"column":9,"nodeType":"329","messageId":"357","endLine":174,"endColumn":10},{"ruleId":"327","severity":1,"message":"356","line":180,"column":9,"nodeType":"329","messageId":"357","endLine":193,"endColumn":10},{"ruleId":"296","severity":1,"message":"297","line":204,"column":27,"nodeType":"298","messageId":"299","endLine":204,"endColumn":29},{"ruleId":"280","severity":1,"message":"358","line":235,"column":7,"nodeType":"282","messageId":"283","endLine":235,"endColumn":12},{"ruleId":"317","severity":1,"message":"318","line":243,"column":4,"nodeType":"307","messageId":"319","endLine":243,"endColumn":16,"fix":"359"},{"ruleId":"317","severity":1,"message":"318","line":247,"column":4,"nodeType":"307","messageId":"319","endLine":247,"endColumn":16,"fix":"360"},{"ruleId":"296","severity":1,"message":"297","line":304,"column":13,"nodeType":"298","messageId":"299","endLine":304,"endColumn":15},{"ruleId":"296","severity":1,"message":"297","line":309,"column":31,"nodeType":"298","messageId":"299","endLine":309,"endColumn":33},{"ruleId":"296","severity":1,"message":"297","line":325,"column":13,"nodeType":"298","messageId":"299","endLine":325,"endColumn":15},{"ruleId":"296","severity":1,"message":"297","line":331,"column":27,"nodeType":"298","messageId":"299","endLine":331,"endColumn":29},{"ruleId":"280","severity":1,"message":"324","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":30},{"ruleId":"310","severity":1,"message":"311","line":29,"column":1,"nodeType":"312","endLine":469,"endColumn":3},{"ruleId":"296","severity":1,"message":"297","line":67,"column":13,"nodeType":"298","messageId":"299","endLine":67,"endColumn":15},{"ruleId":"296","severity":1,"message":"325","line":110,"column":28,"nodeType":"298","messageId":"299","endLine":110,"endColumn":30},{"ruleId":"317","severity":1,"message":"318","line":144,"column":4,"nodeType":"307","messageId":"319","endLine":144,"endColumn":16,"fix":"361"},{"ruleId":"327","severity":1,"message":"328","line":184,"column":11,"nodeType":"329","messageId":"330","endLine":218,"endColumn":12},{"ruleId":"296","severity":1,"message":"297","line":187,"column":38,"nodeType":"298","messageId":"299","endLine":187,"endColumn":40},{"ruleId":"296","severity":1,"message":"297","line":196,"column":25,"nodeType":"298","messageId":"299","endLine":196,"endColumn":27},{"ruleId":"296","severity":1,"message":"297","line":200,"column":30,"nodeType":"298","messageId":"299","endLine":200,"endColumn":32},{"ruleId":"296","severity":1,"message":"297","line":226,"column":36,"nodeType":"298","messageId":"299","endLine":226,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":236,"column":23,"nodeType":"298","messageId":"299","endLine":236,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":241,"column":32,"nodeType":"298","messageId":"299","endLine":241,"endColumn":34},{"ruleId":"296","severity":1,"message":"297","line":269,"column":36,"nodeType":"298","messageId":"299","endLine":269,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":278,"column":23,"nodeType":"298","messageId":"299","endLine":278,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":282,"column":28,"nodeType":"298","messageId":"299","endLine":282,"endColumn":30},{"ruleId":"296","severity":1,"message":"297","line":305,"column":36,"nodeType":"298","messageId":"299","endLine":305,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":315,"column":23,"nodeType":"298","messageId":"299","endLine":315,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":320,"column":32,"nodeType":"298","messageId":"299","endLine":320,"endColumn":34},{"ruleId":"317","severity":1,"message":"318","line":351,"column":4,"nodeType":"307","messageId":"319","endLine":351,"endColumn":16,"fix":"362"},{"ruleId":"317","severity":1,"message":"318","line":355,"column":4,"nodeType":"307","messageId":"319","endLine":355,"endColumn":16,"fix":"363"},{"ruleId":"317","severity":1,"message":"318","line":365,"column":4,"nodeType":"307","messageId":"319","endLine":365,"endColumn":16,"fix":"364"},{"ruleId":"317","severity":1,"message":"318","line":369,"column":4,"nodeType":"307","messageId":"319","endLine":369,"endColumn":16,"fix":"365"},{"ruleId":"317","severity":1,"message":"318","line":380,"column":4,"nodeType":"307","messageId":"319","endLine":380,"endColumn":16,"fix":"366"},{"ruleId":"296","severity":1,"message":"297","line":389,"column":27,"nodeType":"298","messageId":"299","endLine":389,"endColumn":29},{"ruleId":"296","severity":1,"message":"297","line":413,"column":15,"nodeType":"298","messageId":"299","endLine":413,"endColumn":17},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Component' is defined but never used.","'Router' is defined but never used.","'Container' is defined but never used.","'Card' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'signin' is defined but never used.","'useDispatch' is defined but never used.","'connect' is defined but never used.","'logined' is assigned a value but never used.","'setLogin' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Prev' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"367","text":"368"},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-whitespace-before-property","Unexpected whitespace before property textFont.","unexpectedWhitespace",{"range":"369","text":"370"},"Unexpected mix of '&&' and '||'.",{"range":"371","text":"370"},{"range":"372","text":"370"},"'getQueriesForElement' is defined but never used.","Expected '!==' and instead saw '!='.",{"range":"373","text":"370"},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",{"range":"374","text":"370"},{"range":"375","text":"370"},{"range":"376","text":"370"},{"range":"377","text":"370"},{"range":"378","text":"370"},{"range":"379","text":"370"},{"range":"380","text":"370"},{"range":"381","text":"370"},{"range":"382","text":"370"},{"range":"383","text":"370"},{"range":"384","text":"370"},"Unexpected whitespace before property x_cord.",{"range":"385","text":"370"},"Unexpected whitespace before property y_cord.",{"range":"386","text":"370"},"Unexpected whitespace before property number.",{"range":"387","text":"370"},{"range":"388","text":"370"},{"range":"389","text":"370"},{"range":"390","text":"370"},{"range":"391","text":"370"},"'Dropdown' is defined but never used.",{"range":"392","text":"370"},{"range":"393","text":"370"},{"range":"394","text":"370"},"Nested block is redundant.","redundantNestedBlock","'score' is assigned a value but never used.",{"range":"395","text":"370"},{"range":"396","text":"370"},{"range":"397","text":"370"},{"range":"398","text":"370"},{"range":"399","text":"370"},{"range":"400","text":"370"},{"range":"401","text":"370"},{"range":"402","text":"370"},[282,301],"\r\n                .",[6509,6511],".",[14442,14444],[14661,14663],[3441,3443],[9009,9011],[9109,9111],[9349,9351],[9489,9491],[9725,9727],[3686,3688],[11311,11313],[11481,11483],[11782,11784],[11951,11953],[12296,12298],[12816,12818],[12902,12904],[12990,12992],[4381,4383],[4620,4622],[6422,6424],[6619,6621],[3890,3892],[4391,4393],[4526,4528],[7202,7204],[7342,7344],[3746,3748],[9535,9537],[9676,9678],[9882,9884],[10022,10024],[10258,10260]]