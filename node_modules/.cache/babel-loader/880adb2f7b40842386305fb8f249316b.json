{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/funmath-frontend/src/games/game8.js\";\nimport { getQueriesForElement } from \"@testing-library/react\";\nimport React from \"react\";\nimport Sketch from \"react-p5\"; // Coordinates from where the snake starts\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet x_start = 200;\nlet y_start = 200; // x and y cordinates array of the beads of snake \n\nlet x_cord = [];\nlet y_cord = []; // total beads of snake\n\nlet beats = 100; // Direction of snake \n//  1==>right\n// 2==> upwards\n// 3==>left\n// 4==>Down\n\nlet direction = 1;\nlet speed = 1; //speed of snake\n\nlet changedirection = false; // for changing the direction\n\nlet previous_direction = 2;\nlet collide = false; //if snake collides with the outer walls\n\nlet food = []; // food array \n\nlet answer = true;\nlet answers_remainig = true;\nlet start = true;\nexport default (props => {\n  const setup = (p5, canvasParentRef) => {\n    // use parent to render the canvas in this ref\n    // (without that p5 will render the canvas outside of your component)\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef);\n  };\n\n  const draw = p5 => {\n    if (start) {\n      setupstart(p5); ///Runs only first time\n    }\n\n    p5.background(255, 241, 208);\n    update_snake(p5); //moves the snake \n\n    update_direction(p5); // updates the direction if changed\n\n    check_collider(); //checks if snakes collide\n\n    questions_and_answers(p5); //dispaly the questions ans answrs\n\n    getMouseClick(p5); /// get the mouse click on the retry\n  };\n\n  const setupstart = p5 => {\n    // First times push the food array with cordinates and the number \n    for (let i = beats; i > 0; i--) {\n      if (i == 1) x_cord.push(x_start + 10);else x_cord.push(x_start - i);\n      y_cord.push(y_start);\n    }\n\n    for (let i = 0; i < 10; i++) {\n      food.push({\n        'x_cord': p5.floor(p5.random(10, window.innerWidth * 0.6 / 10)) * 10,\n        'y_cord': p5.floor(p5.random(10, window.innerHeight * 0.75 / 10)) * 10,\n        'number': p5.floor(p5.random(10, 99))\n      });\n    }\n\n    start = false;\n  };\n\n  const check_collider = () => {\n    let snake_head_x = x_cord[beats - 1];\n    let snake_head_y = y_cord[beats - 1]; //// Check if the snake collide with the canvas walls\n\n    if (snake_head_x < 0 || snake_head_x > window.innerWidth * 0.60 || snake_head_y < 0 || snake_head_y > window.innerHeight * 0.75) {\n      collide = true;\n    }\n\n    food.forEach(element => {\n      // Checks if the snake head collide with any food in array\n      if (snake_head_x > element.x_cord - 15 && snake_head_x < element.x_cord + 15 && snake_head_y > element.y_cord - 15 && snake_head_y < element.y_cord + 15) {\n        // logic to get the minimum number\n        let min = 100;\n        food.forEach(xelement => {\n          if (min > xelement.number) min = xelement.number;\n        }); // check if the snake get the right answer food\n\n        if (element.number != min) answer = false;else {\n          // const index = food.indexOf(element);\n          // if (index > -1) {\n          //   food.splice(index, 1);\n          // }\n          // answers_remainig=false;\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\n          // and appears as the snake eated it \n          element.x_cord = -11;\n          element.y_cord = -11;\n          element.number = 111;\n          answers_remainig = false;\n        }\n      } else {}\n    });\n  };\n\n  const questions_and_answers = p5 => {\n    // Display the questions \n    p5.textSize(26);\n    p5.fill(0, 102, 153);\n    p5.textAlign(p5.CENTER, p5.TOP);\n    p5.textFont('Cursive');\n    p5.text('Task :: Let the snake eat the numbers in\\n Ascending order ', window.innerWidth * 0.6 / 2, 10); // display all the numbers on the food present in the array \n\n    for (let i = 0; i < food.length; i++) {\n      p5.fill(255, 128, 0);\n      p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\n      p5.textSize(20);\n      p5.fill(0, 102, 153);\n      p5.textAlign(p5.CENTER, p5.CENTER);\n      p5.text(food[i].number, food[i].x_cord, food[i].y_cord);\n    }\n\n    food.forEach(element => {\n      // check if the answer is remaining\n      if (element.number < 100) answers_remainig = true;\n    });\n  };\n\n  const update_snake = p5 => {\n    //p5.noStroke();        \n    /// Updates the snake position \n    p5.fill(157, 0, 0);\n\n    for (let index = 0; index < beats; index++) {\n      p5.circle(x_cord[index], y_cord[index], 10, 10);\n    }\n  };\n\n  const update_direction = p5 => {\n    // if the snake present in the canvas and there's answer present there\n    if (!collide && answer && answers_remainig) {\n      switch (direction) {\n        // case 1 is the direcion in the right\n        case 1:\n          {\n            if (changedirection) {\n              // if direction is changed from previous direction\n              x_cord[beats - 1] += 10;\n              if (previous_direction == 2) // if previous direction is positive y axis\n                y_cord[beats - 1] += 10;else // if previous Direction is negative y axis\n                y_cord[beats - 1] -= 10;\n              changedirection = false;\n              previous_direction = 1;\n            }\n\n            for (let index = 0; index < beats; index++) {\n              if (index == beats - 1) {\n                x_cord[beats - 1] += speed; // every snake bead get the position of its warly bead\n              } else if (index == beats - 2) {\n                x_cord[index] = x_cord[index + 1] - 10; // the head space of snake\n\n                y_cord[index] = y_cord[index + 1];\n              } else {\n                x_cord[index] = x_cord[index + 1]; // every snake bead get the position of its early bead\n\n                y_cord[index] = y_cord[index + 1];\n              }\n            }\n\n            changedirection = false;\n          }\n          break;\n        // case 2 is the direcion in the upwards\n\n        case 2:\n          if (changedirection) {\n            // if direction is changed from previous direction\n            y_cord[beats - 1] -= 10;\n            if (previous_direction == 3) // if previous direction is negative x axis\n              x_cord[beats - 1] += 10;else x_cord[beats - 1] -= 10; //if previous direction is positive x axis\n\n            changedirection = false;\n            previous_direction = 2;\n          }\n\n          for (let index = 0; index < beats; index++) {\n            if (index == beats - 1) {\n              y_cord[beats - 1] -= speed;\n            } else if (index + 1 == beats - 1) {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1] + 10;\n            } else {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1];\n            }\n          }\n\n          changedirection = false;\n          break;\n        // case 3 is the direcion in the left\n\n        case 3:\n          if (changedirection) {\n            // if direction is changed from previous direction\n            x_cord[beats - 1] -= 10;\n            if (previous_direction == 2) // if previous direction is posiive y axis\n              y_cord[beats - 1] += 10;else //if previous direction is negative y axis\n              y_cord[beats - 1] -= 10;\n            changedirection = false;\n            previous_direction = 3;\n          }\n\n          for (let index = 0; index < beats; index++) {\n            if (index == beats - 1) {\n              x_cord[beats - 1] -= speed;\n            } else if (index == beats - 2) {\n              x_cord[index] = x_cord[index + 1] + 10;\n              y_cord[index] = y_cord[index + 1];\n            } else {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1];\n            }\n          }\n\n          changedirection = false;\n          break;\n        // case 4 is the direcion in the downwards\n\n        case 4:\n          if (changedirection) {\n            // if direction is changed from previous direction\n            y_cord[beats - 1] += 10;\n            if (previous_direction == 3) // if previous direction is negative x axis\n              x_cord[beats - 1] += 10;else // if previous direction is posiive x axis\n              x_cord[beats - 1] -= 10;\n            changedirection = false;\n            previous_direction = 4;\n          }\n\n          for (let index = 0; index < beats; index++) {\n            if (index == beats - 1) {\n              y_cord[beats - 1] += speed;\n            } else if (index + 1 == beats - 1) {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1] - 10;\n            } else {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1];\n            }\n          }\n\n          changedirection = false;\n          break;\n\n        default:\n          break;\n      }\n    } // if collided with canvas walls print message\n    else if (collide) {\n        p5.textSize(26);\n        p5.textAlign(p5.CENTER, p5.TOP);\n        p5.textFont('Cursive');\n        p5.text('Oops, Try again', window.innerWidth * 0.6 / 2, 70);\n        p5.textAlign(p5.LEFT, p5.TOP);\n        p5.textFont('Cursive');\n        p5.text('Retry ↻', 20, 20);\n      } // if get the wrong answer\n      else if (!answer) {\n          p5.textSize(26);\n          p5.textAlign(p5.CENTER, p5.TOP);\n          p5.textFont('Cursive');\n          p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 70);\n          p5.textAlign(p5.LEFT, p5.TOP);\n          p5.textFont('Cursive');\n          p5.text('Retry ↻', 20, 20);\n        } // if no answer remains\n        else if (!answers_remainig) {\n            p5.textSize(26);\n            p5.fill(0, 153, 0);\n            p5.textAlign(p5.CENTER, p5.TOP);\n            p5.textFont('Cursive');\n            p5.text('You Won ✓', window.innerWidth * 0.6 / 2, 70);\n          }\n  };\n\n  const getMouseClick = p5 => {\n    let mouse_x;\n    let mouse_y; //  get the mouse axis\n\n    if (p5.mouseIsPressed == true) {\n      mouse_x = p5.mouseX;\n      mouse_y = p5.mouseY;\n    } // if pressed on retry or play again\n\n\n    if ((!answer || collide) && mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\n      for (let i = 0; i < 10; i++) {\n        food[i].x_cord = p5.floor(p5.random(10, window.innerWidth * 0.6 / 10)) * 10;\n        food[i].y_cord = p5.floor(p5.random(10, window.innerHeight * 0.75 / 10)) * 10;\n        food[i].number = p5.floor(p5.random(10, 99));\n      }\n\n      collide = false;\n      answer = true; //reset the original direction and position\n\n      x_start = 200;\n      y_start = 200;\n      direction = 1;\n\n      for (let i = beats; i > 0; i--) {\n        if (i == 1) x_cord[i] = x_start + 10;else x_cord[i] = x_start - i;\n        y_cord[i] = y_start;\n      }\n    }\n  };\n\n  const keyPressed = p5 => {\n    // check which key is pressed\n    if (p5.keyCode === p5.LEFT_ARROW) {\n      if (direction !== 1 && direction !== 3) {\n        direction = 3;\n        changedirection = true;\n      }\n    } else if (p5.keyCode === p5.RIGHT_ARROW) {\n      if (direction !== 3 && direction !== 1) {\n        direction = 1;\n        changedirection = true;\n      }\n    } else if (p5.keyCode === p5.UP_ARROW) {\n      if (direction !== 4 && direction !== 2) {\n        direction = 2;\n        changedirection = true;\n      }\n    } else if (p5.keyCode === p5.DOWN_ARROW) {\n      if (direction !== 2 && direction !== 4) {\n        direction = 4;\n        changedirection = true;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sketch, {\n    setup: setup,\n    draw: draw,\n    keyPressed: keyPressed,\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      alignContent: 'center',\n      backgroundColor: '#FFF1D0'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 457,\n    columnNumber: 10\n  }, this);\n});","map":{"version":3,"sources":["/Users/user/Desktop/funmath-frontend/src/games/game8.js"],"names":["getQueriesForElement","React","Sketch","x_start","y_start","x_cord","y_cord","beats","direction","speed","changedirection","previous_direction","collide","food","answer","answers_remainig","start","props","setup","p5","canvasParentRef","createCanvas","window","innerWidth","innerHeight","parent","draw","setupstart","background","update_snake","update_direction","check_collider","questions_and_answers","getMouseClick","i","push","floor","random","snake_head_x","snake_head_y","forEach","element","min","xelement","number","textSize","fill","textAlign","CENTER","TOP","textFont","text","length","circle","index","LEFT","mouse_x","mouse_y","mouseIsPressed","mouseX","mouseY","keyPressed","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","justifyContent","alignItems","alignContent","backgroundColor"],"mappings":"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","sourcesContent":["import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\n// Coordinates from where the snake starts\r\nlet x_start = 200;\r\nlet y_start = 200;\r\n// x and y cordinates array of the beads of snake \r\nlet x_cord = [];\r\nlet y_cord = [];\r\n// total beads of snake\r\nlet beats = 100;\r\n// Direction of snake \r\n//  1==>right\r\n// 2==> upwards\r\n// 3==>left\r\n// 4==>Down\r\nlet direction = 1;\r\nlet speed = 1;  //speed of snake\r\nlet changedirection = false;  // for changing the direction\r\nlet previous_direction = 2;\r\nlet collide = false;   //if snake collides with the outer walls\r\nlet food = [] // food array \r\nlet answer = true\r\nlet answers_remainig = true\r\nlet start = true\r\n\r\n\r\nexport default (props) => {\r\n\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    // use parent to render the canvas in this ref\r\n    // (without that p5 will render the canvas outside of your component)\r\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n\r\n  };\r\n\r\n  const draw = (p5) => {\r\n\r\n\r\n    if (start) {\r\n      setupstart(p5)   ///Runs only first time\r\n    }\r\n\r\n    p5.background(255, 241, 208);\r\n\r\n\r\n    update_snake(p5);  //moves the snake \r\n    update_direction(p5);   // updates the direction if changed\r\n    check_collider();    //checks if snakes collide\r\n    questions_and_answers(p5);   //dispaly the questions ans answrs\r\n\r\n\r\n    getMouseClick(p5) /// get the mouse click on the retry\r\n\r\n\r\n  };\r\n\r\n  const setupstart = (p5) => {\r\n\r\n\r\n\r\n// First times push the food array with cordinates and the number \r\n    for (let i = beats; i > 0; i--) {\r\n      if (i == 1)\r\n        x_cord.push(x_start + 10)\r\n      else\r\n        x_cord.push(x_start - i);\r\n      y_cord.push(y_start)\r\n\r\n    }\r\n\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      food.push({\r\n        'x_cord': p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10,\r\n        'y_cord': p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10,\r\n        'number': p5.floor(p5.random(10, 99)),\r\n      })\r\n\r\n    }\r\n    start = false\r\n  }\r\n\r\n\r\n  const check_collider = () => {\r\n    let snake_head_x = x_cord[beats - 1];\r\n    let snake_head_y = y_cord[beats - 1];\r\n\r\n//// Check if the snake collide with the canvas walls\r\n    if (snake_head_x < 0 || snake_head_x > window.innerWidth * 0.60 || snake_head_y < 0 || snake_head_y > window.innerHeight * 0.75) {\r\n      collide = true\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      // Checks if the snake head collide with any food in array\r\n      if ((snake_head_x > element.x_cord - 15 && snake_head_x < element.x_cord + 15) && (snake_head_y > element.y_cord - 15 && snake_head_y < element.y_cord + 15)) {\r\n\r\n\r\n        // logic to get the minimum number\r\n        let min = 100;\r\n        food.forEach(xelement => {\r\n          if (min > xelement.number)\r\n            min = xelement.number\r\n        });\r\n        // check if the snake get the right answer food\r\n        if (element.number != min)\r\n          answer = false\r\n        else {\r\n\r\n          // const index = food.indexOf(element);\r\n          // if (index > -1) {\r\n          //   food.splice(index, 1);\r\n          // }\r\n          // answers_remainig=false;\r\n\r\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\r\n          // and appears as the snake eated it \r\n          element.x_cord = -11\r\n          element.y_cord = -11\r\n          element.number = 111;\r\n          answers_remainig = false;\r\n        }\r\n      } else {\r\n\r\n      }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  const questions_and_answers = (p5) => {\r\n    // Display the questions \r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n    p5.textAlign(p5.CENTER, p5.TOP);\r\n    \r\n   p5 .textFont('Cursive')\r\n    p5.text('Task :: Let the snake eat the numbers in\\n Ascending order ', (window.innerWidth * 0.6) / 2, 10);\r\n\r\n    // display all the numbers on the food present in the array \r\n    for (let i = 0; i < food.length; i++) {\r\n      p5.fill(255, 128, 0);\r\n      p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\r\n      p5.textSize(20);\r\n      p5.fill(0, 102, 153)\r\n\r\n      p5.textAlign(p5.CENTER, p5.CENTER);\r\n      p5.text(food[i].number, food[i].x_cord, food[i].y_cord)\r\n\r\n    }\r\n\r\n\r\n    food.forEach(element => {\r\n      // check if the answer is remaining\r\n      if (element.number < 100)\r\n        answers_remainig = true\r\n    });\r\n\r\n  }\r\n\r\n  const update_snake = (p5) => {\r\n    //p5.noStroke();        \r\n    /// Updates the snake position \r\n    p5.fill(157, 0, 0);\r\n    for (let index = 0; index < beats; index++) {\r\n      p5.circle(x_cord[index], y_cord[index], 10, 10);\r\n    }\r\n  }\r\n  const update_direction = (p5) => {\r\n \r\n    // if the snake present in the canvas and there's answer present there\r\n    if (!collide && answer && answers_remainig) {\r\n      switch (direction) {\r\n\r\n        // case 1 is the direcion in the right\r\n        case 1:\r\n          {\r\n            if (changedirection) { // if direction is changed from previous direction\r\n              x_cord[beats - 1] += 10;\r\n              if (previous_direction == 2) // if previous direction is positive y axis\r\n                y_cord[beats - 1] += 10;\r\n              else                        // if previous Direction is negative y axis\r\n                y_cord[beats - 1] -= 10;\r\n\r\n              changedirection = false;\r\n              previous_direction = 1;\r\n            }\r\n            for (let index = 0; index < beats; index++) {\r\n              if (index == beats - 1) {\r\n\r\n                x_cord[beats - 1] += speed; // every snake bead get the position of its warly bead\r\n              }\r\n              else if (index == beats - 2) {\r\n\r\n                x_cord[index] = x_cord[index + 1] - 10;  // the head space of snake\r\n                y_cord[index] = y_cord[index + 1];\r\n\r\n              }\r\n\r\n              else {\r\n                x_cord[index] = x_cord[index + 1]; // every snake bead get the position of its early bead\r\n                y_cord[index] = y_cord[index + 1];\r\n\r\n              }\r\n\r\n            }\r\n\r\n\r\n\r\n            changedirection = false;\r\n          }\r\n          break;\r\n\r\n // case 2 is the direcion in the upwards\r\n        case 2:\r\n\r\n          if (changedirection) {// if direction is changed from previous direction\r\n            y_cord[beats - 1] -= 10;\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else\r\n              x_cord[beats - 1] -= 10;//if previous direction is positive x axis\r\n\r\n            changedirection = false\r\n            previous_direction = 2;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] -= speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] + 10;\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n\r\n\r\n          break;\r\n\r\n           // case 3 is the direcion in the left\r\n        case 3:\r\n\r\n\r\n\r\n          if (changedirection) {// if direction is changed from previous direction\r\n            x_cord[beats - 1] -= 10;\r\n            if (previous_direction == 2)// if previous direction is posiive y axis\r\n              y_cord[beats - 1] += 10;\r\n            else                //if previous direction is negative y axis\r\n              y_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false;\r\n            previous_direction = 3;\r\n          }\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              x_cord[beats - 1] -= speed;\r\n            }\r\n            else if (index == beats - 2) {\r\n\r\n              x_cord[index] = x_cord[index + 1] + 10;\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n           // case 4 is the direcion in the downwards\r\n        case 4:\r\n          if (changedirection) {// if direction is changed from previous direction\r\n            y_cord[beats - 1] += 10;\r\n\r\n            if (previous_direction == 3)// if previous direction is negative x axis\r\n              x_cord[beats - 1] += 10;\r\n            else                        // if previous direction is posiive x axis\r\n              x_cord[beats - 1] -= 10;\r\n\r\n            changedirection = false\r\n            previous_direction = 4;\r\n          }\r\n\r\n          for (let index = 0; index < beats; index++) {\r\n            if (index == beats - 1) {\r\n\r\n              y_cord[beats - 1] += speed;\r\n\r\n            }\r\n            else if (index + 1 == beats - 1) {\r\n\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1] - 10;\r\n\r\n            }\r\n\r\n            else {\r\n              x_cord[index] = x_cord[index + 1];\r\n              y_cord[index] = y_cord[index + 1];\r\n\r\n            }\r\n\r\n          }\r\n\r\n\r\n          changedirection = false;\r\n          break;\r\n\r\n\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    // if collided with canvas walls print message\r\n    else if (collide) {\r\n      p5.textSize(26);\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Oops, Try again', window.innerWidth * 0.6 / 2, 70)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n    \r\n    // if get the wrong answer\r\n    else if (!answer) {\r\n      p5.textSize(26);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 70)\r\n      p5.textAlign(p5.LEFT, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('Retry ↻', 20, 20)\r\n    }\r\n\r\n    // if no answer remains\r\n    else if (!answers_remainig) {\r\n      p5.textSize(26);\r\n      p5.fill(0, 153, 0);\r\n\r\n      p5.textAlign(p5.CENTER, p5.TOP);\r\n      \r\n   p5 .textFont('Cursive')\r\n      p5.text('You Won ✓', window.innerWidth * 0.6 / 2, 70)\r\n    }\r\n  }\r\n\r\n  const getMouseClick = (p5) => {\r\n    let mouse_x;\r\n    let mouse_y;\r\n    //  get the mouse axis\r\n    if (p5.mouseIsPressed == true) {\r\n      mouse_x = p5.mouseX;\r\n      mouse_y = p5.mouseY;\r\n    }\r\n\r\n    // if pressed on retry or play again\r\n    if ((!answer || collide) && mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\r\n      for (let i = 0; i < 10; i++) {\r\n\r\n        food[i].x_cord = p5.floor(p5.random(10, (window.innerWidth * 0.6) / 10)) * 10\r\n        food[i].y_cord = p5.floor(p5.random(10, (window.innerHeight * 0.75) / 10)) * 10\r\n        food[i].number = p5.floor(p5.random(10, 99))\r\n\r\n\r\n      }\r\n      collide = false\r\n      answer = true\r\n\r\n\r\n      //reset the original direction and position\r\n      x_start = 200;\r\n      y_start = 200;\r\n      direction = 1\r\n      for (let i = beats; i > 0; i--) {\r\n        if (i == 1)\r\n          x_cord[i] = (x_start + 10)\r\n        else\r\n          x_cord[i] = (x_start - i);\r\n        y_cord[i] = (y_start)\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const keyPressed = (p5) => {\r\n\r\n    // check which key is pressed\r\n    if (p5.keyCode === p5.LEFT_ARROW) {\r\n      if (direction !== 1 && direction !== 3) {\r\n        direction = 3;\r\n        changedirection = true;\r\n      }\r\n    } else if (p5.keyCode === p5.RIGHT_ARROW) {\r\n      if (direction !== 3 && direction !== 1) {\r\n        direction = 1;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n    else if (p5.keyCode === p5.UP_ARROW) {\r\n      if (direction !== 4 && direction !== 2) {\r\n        direction = 2;\r\n\r\n        changedirection = true;\r\n      }\r\n\r\n    }\r\n    else if (p5.keyCode === p5.DOWN_ARROW) {\r\n      if (direction !== 2 && direction !== 4) {\r\n        direction = 4;\r\n\r\n        changedirection = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return <Sketch setup={setup}\r\n    draw={draw}\r\n    keyPressed={keyPressed}\r\n    style={\r\n      {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        alignContent: 'center',\r\n        backgroundColor: '#FFF1D0',\r\n      }\r\n    }\r\n  />;\r\n};"]},"metadata":{},"sourceType":"module"}