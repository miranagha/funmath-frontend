{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/funmath/funmath/src/games/game7.js\";\nimport { getQueriesForElement } from \"@testing-library/react\";\nimport React from \"react\";\nimport Sketch from \"react-p5\"; // Coordinates from where the snake starts\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet x_start = 200;\nlet y_start = 200; // x and y cordinates array of the beads of snake \n\nlet x_cord = [];\nlet y_cord = []; // total beads of snake\n\nlet beats = 100; // Direction of snake \n//  1==>right\n// 2==> upwards\n// 3==>left\n// 4==>Down\n\nlet direction = 1;\nlet speed = 1; //speed of snake\n\nlet changedirection = false; // for changing the direction\n\nlet previous_direction = 2;\nlet collide = false; //if snake collides with the outer walls\n\nlet food = []; // food array \n\nlet answer = true;\nlet answers_remainig = true;\nlet start = true;\nexport default (props => {\n  const setup = (p5, canvasParentRef) => {\n    // use parent to render the canvas in this ref\n    // (without that p5 will render the canvas outside of your component)\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef);\n  };\n\n  const draw = p5 => {\n    if (start) {\n      setupstart(p5); ///Runs only first time\n    }\n\n    p5.background(255, 241, 208);\n    update_snake(p5); //moves the snake \n\n    update_direction(p5); // updates the direction if changed\n\n    check_collider(); //checks if snakes collide\n\n    questions_and_answers(p5); //dispaly the questions ans answrs\n\n    getMouseClick(p5); /// get the mouse click on the retry\n  };\n\n  const setupstart = p5 => {\n    // First times push the food array with cordinates and the number \n    for (let i = beats; i > 0; i--) {\n      if (i == 1) x_cord.push(x_start + 10);else x_cord.push(x_start - i);\n      y_cord.push(y_start);\n    }\n\n    for (let i = 0; i < 10; i++) {\n      food.push({\n        'x_cord': p5.floor(p5.random(10, window.innerWidth * 0.6 / 10)) * 10,\n        'y_cord': p5.floor(p5.random(10, window.innerHeight * 0.75 / 10)) * 10,\n        'number': p5.floor(p5.random(10, 99))\n      });\n    }\n\n    start = false;\n  };\n\n  const check_collider = () => {\n    let snake_head_x = x_cord[beats - 1];\n    let snake_head_y = y_cord[beats - 1]; //// Check if the snake collide with the canvas walls\n\n    if (snake_head_x < 0 || snake_head_x > window.innerWidth * 0.60 || snake_head_y < 0 || snake_head_y > window.innerHeight * 0.75) {\n      collide = true;\n    }\n\n    food.forEach(element => {\n      if (snake_head_x > element.x_cord - 15 && snake_head_x < element.x_cord + 15 && snake_head_y > element.y_cord - 15 && snake_head_y < element.y_cord + 15) {\n        // logic to get the maximum number\n        let max = 0;\n        food.forEach(xelement => {\n          if (max < xelement.number) max = xelement.number;\n        }); // check if the snake get the right answer food\n\n        if (element.number != max) answer = false;else {\n          // const index = food.indexOf(element);\n          // if (index > -1) {\n          //   food.splice(index, 1);\n          // }\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\n          // and appears as the snake eated it \n          element.x_cord = -11;\n          element.y_cord = -11;\n          element.number = 0;\n          answers_remainig = false;\n        }\n      } else {}\n    });\n  };\n\n  const questions_and_answers = p5 => {\n    // Display the questions \n    p5.textSize(26);\n    p5.fill(0, 102, 153);\n    p5.textAlign(p5.CENTER, p5.TOP);\n    p5.textFont('Cursive');\n    p5.text('Task :: Let the snake eat the numbers in \\n Descending order ', window.innerWidth * 0.6 / 2, 10); // display all the numbers on the food present in the array \n\n    for (let i = 0; i < food.length; i++) {\n      p5.fill(255, 128, 0);\n      p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\n      p5.textSize(20);\n      p5.fill(0, 102, 153);\n      p5.textAlign(p5.CENTER, p5.CENTER);\n      p5.text(food[i].number, food[i].x_cord, food[i].y_cord);\n    }\n\n    food.forEach(element => {\n      // check if the answer is remaining\n      if (element.number > 0) answers_remainig = true;\n    });\n  };\n\n  const update_snake = p5 => {\n    //p5.noStroke();        \n    /// Updates the snake position \n    p5.fill(157, 0, 0);\n\n    for (let index = 0; index < beats; index++) {\n      p5.circle(x_cord[index], y_cord[index], 10, 10);\n    }\n  };\n\n  const update_direction = p5 => {\n    // if the snake present in the canvas and there's answer present there\n    if (!collide && answer && answers_remainig) {\n      switch (direction) {\n        // case 1 is the direcion in the right\n        case 1:\n          {\n            if (changedirection) {\n              // if direction is changed from previous direction\n              x_cord[beats - 1] += 10;\n              if (previous_direction == 2) // if previous direction is positive y axis\n                y_cord[beats - 1] += 10;else // if previous Direction is negative y axis\n                y_cord[beats - 1] -= 10;\n              changedirection = false;\n              previous_direction = 1;\n            }\n\n            for (let index = 0; index < beats; index++) {\n              if (index == beats - 1) {\n                x_cord[beats - 1] += speed;\n              } else if (index == beats - 2) {\n                x_cord[index] = x_cord[index + 1] - 10;\n                y_cord[index] = y_cord[index + 1];\n              } else {\n                x_cord[index] = x_cord[index + 1];\n                y_cord[index] = y_cord[index + 1];\n              }\n            }\n\n            changedirection = false;\n          }\n          break;\n        // case 2 is the direcion in the upwards\n\n        case 2:\n          if (changedirection) {\n            // if direction is changed from previous direction\n            y_cord[beats - 1] -= 10;\n            if (previous_direction == 3) // if previous direction is negative x axis\n              x_cord[beats - 1] += 10;else //if previous direction is positive x axis\n              x_cord[beats - 1] -= 10;\n            changedirection = false;\n            previous_direction = 2;\n          }\n\n          for (let index = 0; index < beats; index++) {\n            if (index == beats - 1) {\n              y_cord[beats - 1] -= speed;\n            } else if (index + 1 == beats - 1) {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1] + 10;\n            } else {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1];\n            }\n          }\n\n          changedirection = false;\n          break;\n        // case 3 is the direcion in the left\n\n        case 3:\n          if (changedirection) {\n            // if direction is changed from previous direction\n            x_cord[beats - 1] -= 10;\n            if (previous_direction == 2) // if previous direction is posiive y axis\n              y_cord[beats - 1] += 10;else //if previous direction is negative y axis\n              y_cord[beats - 1] -= 10;\n            changedirection = false;\n            previous_direction = 3;\n          }\n\n          for (let index = 0; index < beats; index++) {\n            if (index == beats - 1) {\n              x_cord[beats - 1] -= speed;\n            } else if (index == beats - 2) {\n              x_cord[index] = x_cord[index + 1] + 10;\n              y_cord[index] = y_cord[index + 1];\n            } else {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1];\n            }\n          }\n\n          changedirection = false;\n          break;\n        // case 4 is the direcion in the downwards\n\n        case 4:\n          if (changedirection) {\n            // if direction is changed from previous direction\n            y_cord[beats - 1] += 10;\n            if (previous_direction == 3) // if previous direction is negative x axis\n              x_cord[beats - 1] += 10;else // if previous direction is posiive x axis\n              x_cord[beats - 1] -= 10;\n            changedirection = false;\n            previous_direction = 4;\n          }\n\n          for (let index = 0; index < beats; index++) {\n            if (index == beats - 1) {\n              y_cord[beats - 1] += speed;\n            } else if (index + 1 == beats - 1) {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1] - 10;\n            } else {\n              x_cord[index] = x_cord[index + 1];\n              y_cord[index] = y_cord[index + 1];\n            }\n          }\n\n          changedirection = false;\n          break;\n\n        default:\n          break;\n      }\n    } // if collided with canvas walls print message\n    else if (collide) {\n        p5.textSize(26);\n        p5.textAlign(p5.CENTER, p5.TOP);\n        p5.textFont('Cursive');\n        p5.text('Oops, Try again', window.innerWidth * 0.6 / 2, 70);\n        p5.textAlign(p5.LEFT, p5.TOP);\n        p5.textFont('Cursive');\n        p5.text('Retry ↻', 20, 20);\n      } // if get the wrong answer\n      else if (!answer) {\n          p5.textSize(26);\n          p5.textAlign(p5.CENTER, p5.TOP);\n          p5.textFont('Cursive');\n          p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 70);\n          p5.textAlign(p5.LEFT, p5.TOP);\n          p5.textFont('Cursive');\n          p5.text('Retry ↻', 20, 20);\n        } // if no answer remains\n        else if (!answers_remainig) {\n            p5.textSize(26);\n            p5.fill(0, 153, 0);\n            p5.textAlign(p5.CENTER, p5.TOP);\n            p5.textFont('Cursive');\n            p5.text('You Won ✓', window.innerWidth * 0.6 / 2, 70);\n          }\n  };\n\n  const getMouseClick = p5 => {\n    let mouse_x;\n    let mouse_y; //  get the mouse axis\n\n    if (p5.mouseIsPressed == true) {\n      mouse_x = p5.mouseX;\n      mouse_y = p5.mouseY;\n    } // if pressed on retry or play again\n\n\n    if ((!answer || collide) && mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\n      for (let i = 0; i < 10; i++) {\n        food[i].x_cord = p5.floor(p5.random(10, window.innerWidth * 0.6 / 10)) * 10;\n        food[i].y_cord = p5.floor(p5.random(10, window.innerHeight * 0.75 / 10)) * 10;\n        food[i].number = p5.floor(p5.random(10, 99));\n      }\n\n      collide = false;\n      answer = true; //reset the original direction and position\n\n      x_start = 200;\n      y_start = 200;\n      direction = 1;\n\n      for (let i = beats; i > 0; i--) {\n        if (i == 1) x_cord[i] = x_start + 10;else x_cord[i] = x_start - i;\n        y_cord[i] = y_start;\n      }\n    }\n  };\n\n  const keyPressed = p5 => {\n    // check which key is pressed\n    if (p5.keyCode === p5.LEFT_ARROW) {\n      if (direction !== 1 && direction !== 3) {\n        direction = 3;\n        changedirection = true;\n      }\n    } else if (p5.keyCode === p5.RIGHT_ARROW) {\n      if (direction !== 3 && direction !== 1) {\n        direction = 1;\n        changedirection = true;\n      }\n    } else if (p5.keyCode === p5.UP_ARROW) {\n      if (direction !== 4 && direction !== 2) {\n        direction = 2;\n        changedirection = true;\n      }\n    } else if (p5.keyCode === p5.DOWN_ARROW) {\n      if (direction !== 2 && direction !== 4) {\n        direction = 4;\n        changedirection = true;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sketch, {\n    setup: setup,\n    draw: draw,\n    keyPressed: keyPressed,\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      alignContent: 'center',\n      backgroundColor: '#FFF1D0'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 460,\n    columnNumber: 10\n  }, this);\n});","map":{"version":3,"sources":["/Users/user/Desktop/funmath/funmath/src/games/game7.js"],"names":["getQueriesForElement","React","Sketch","x_start","y_start","x_cord","y_cord","beats","direction","speed","changedirection","previous_direction","collide","food","answer","answers_remainig","start","props","setup","p5","canvasParentRef","createCanvas","window","innerWidth","innerHeight","parent","draw","setupstart","background","update_snake","update_direction","check_collider","questions_and_answers","getMouseClick","i","push","floor","random","snake_head_x","snake_head_y","forEach","element","max","xelement","number","textSize","fill","textAlign","CENTER","TOP","textFont","text","length","circle","index","LEFT","mouse_x","mouse_y","mouseIsPressed","mouseX","mouseY","keyPressed","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","justifyContent","alignItems","alignContent","backgroundColor"],"mappings":"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","sourcesContent":["import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n// Coordinates from where the snake starts\r\nlet x_start = 200;\r\nlet y_start = 200;\r\n// x and y cordinates array of the beads of snake \r\nlet x_cord = [];\r\nlet y_cord = [];\r\n// total beads of snake\r\nlet beats = 100;\r\n// Direction of snake \r\n//  1==>right\r\n// 2==> upwards\r\n// 3==>left\r\n// 4==>Down\r\nlet direction = 1;\r\nlet speed = 1;  //speed of snake\r\nlet changedirection = false;  // for changing the direction\r\nlet previous_direction = 2;\r\nlet collide = false;   //if snake collides with the outer walls\r\nlet food = [] // food array \r\nlet answer = true\r\nlet answers_remainig = true\r\nlet start = true\r\n\r\nexport default (props) => {\r\n \r\n  \r\n\tconst setup = (p5, canvasParentRef) => {\r\n\t\t// use parent to render the canvas in this ref\r\n\t\t// (without that p5 will render the canvas outside of your component)\r\n     p5.createCanvas(window.innerWidth*0.6, window.innerHeight*0.75).parent(canvasParentRef)\r\n\r\n   \r\n\t};\r\n\r\n\tconst draw = (p5) => {\r\n\r\n    \r\n    if(start){\r\n      setupstart(p5) ///Runs only first time\r\n    }\r\n\t\tp5.background(255,241,208);\r\n    \r\n\r\n    update_snake(p5);//moves the snake \r\n    update_direction(p5);   // updates the direction if changed\r\n    check_collider(); //checks if snakes collide\r\n    questions_and_answers(p5);//dispaly the questions ans answrs\r\n\r\n  \r\n    getMouseClick(p5)/// get the mouse click on the retry\r\n    \r\n    \r\n\t};\r\n\r\n  const setupstart=(p5)=>{\r\n\r\n// First times push the food array with cordinates and the number \r\n    for (let i = beats; i > 0; i--) {\r\n      if(i==1)\r\n      x_cord.push(x_start+10)\r\n      else\r\n     x_cord.push(x_start-i);\r\n     y_cord.push(y_start)\r\n      \r\n    }\r\n     for (let i = 0; i < 10; i++) {\r\n       food.push({\r\n         'x_cord':p5.floor(p5.random(10, (window.innerWidth*0.6 ) / 10)) * 10,\r\n         'y_cord':p5.floor(p5.random(10, (window.innerHeight*0.75 ) / 10)) * 10,\r\n         'number':p5.floor(p5.random(10, 99)) ,\r\n       })\r\n       \r\n     }\r\n     start=false\r\n  }\r\n\r\n  const check_collider=()=>{\r\n    let snake_head_x=x_cord[beats-1];\r\n    let snake_head_y=y_cord[beats-1];\r\n\r\n\r\n//// Check if the snake collide with the canvas walls\r\n      if(snake_head_x<0||snake_head_x>window.innerWidth*0.60||snake_head_y<0||snake_head_y>window.innerHeight*0.75){\r\n        collide=true\r\n      }\r\n\r\n     \r\n      food.forEach(element => {\r\n        if ((snake_head_x>element.x_cord-15&&snake_head_x<element.x_cord+15)&&(snake_head_y>element.y_cord-15&&snake_head_y<element.y_cord+15)) {\r\n          \r\n        // logic to get the maximum number\r\n            let max=0;\r\n            food.forEach(xelement => {\r\n               if(max<xelement.number)\r\n                max= xelement.number\r\n            });\r\n            \r\n        // check if the snake get the right answer food\r\n          if(element.number!=max)\r\n          answer=false\r\n          else{\r\n                        \r\n            // const index = food.indexOf(element);\r\n            // if (index > -1) {\r\n            //   food.splice(index, 1);\r\n            // }\r\n\r\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\r\n          // and appears as the snake eated it \r\n\r\n            element.x_cord=-11\r\n            element.y_cord=-11\r\n            element.number=0;\r\n            answers_remainig=false;\r\n            \r\n          }\r\n        } else {\r\n          \r\n        }\r\n      });\r\n\r\n \r\n      \r\n\r\n\r\n  }\r\n\r\n  const questions_and_answers=(p5)=>{\r\n    \r\n    // Display the questions \r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n    p5.textAlign(p5.CENTER,p5.TOP);\r\n    \r\n   p5 .textFont('Cursive')\r\n    p5.text('Task :: Let the snake eat the numbers in \\n Descending order ', (window.innerWidth*0.6)/2, 10);\r\n    \r\n    // display all the numbers on the food present in the array \r\n    for (let i = 0; i < food.length; i++) {\r\n           \r\n    p5.fill(255,128,0);\r\n    p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\r\n    p5.textSize(20);\r\n    p5.fill(0, 102, 153)\r\n    \r\n    p5.textAlign(p5.CENTER,p5.CENTER);\r\n    p5.text(food[i].number,food[i].x_cord,food[i].y_cord)\r\n\r\n    }\r\n\r\n\r\n        food.forEach(element => {\r\n          // check if the answer is remaining\r\n            if(element.number>0)\r\n            answers_remainig=true\r\n\r\n             \r\n        });\r\n    \r\n  }\r\n \r\n  const update_snake=(p5)=>{\r\n    //p5.noStroke();        \r\n    \r\n    /// Updates the snake position \r\n    p5.fill(157,0,0);\r\n    for (let index = 0; index <beats; index++) {\r\n         p5.circle(x_cord[index], y_cord[index], 10, 10); \r\n    }\r\n  }\r\n  const update_direction=(p5)=>{\r\n\r\n    // if the snake present in the canvas and there's answer present there\r\n        if(!collide&&answer&&answers_remainig){ \r\n                  switch (direction) {\r\n                    \r\n        // case 1 is the direcion in the right\r\n                    case 1:\r\n                  {  \r\n                if(changedirection){  // if direction is changed from previous direction\r\n                  x_cord[beats-1]+=10;\r\n                  if(previous_direction==2) // if previous direction is positive y axis\r\n                  y_cord[beats-1]+=10;\r\n                  else    // if previous Direction is negative y axis\r\n                  y_cord[beats-1]-=10;\r\n                  \r\n                  changedirection=false;\r\n                  previous_direction=1;\r\n                    }\r\n                      for (let index = 0; index < beats; index++) {\r\n                      if(index==beats-1){\r\n                        \r\n                      x_cord[beats-1]+=speed;\r\n                      }\r\n                      else if(index==beats-2){\r\n                        \r\n                        x_cord[index]=x_cord[index+1]-10;\r\n                        y_cord[index]=y_cord[index+1];\r\n                            \r\n                      }\r\n\r\n                      else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                          \r\n                      }\r\n              \r\n                      }\r\n                        \r\n                    \r\n                      \r\n                      changedirection=false;\r\n                  }\r\n                      break;\r\n\r\n // case 2 is the direcion in the upwards\r\n                      case 2:\r\n                    \r\n                        if(changedirection){ // if direction is changed from previous direction\r\n                          y_cord[beats-1]-=10;\r\n                          if(previous_direction==3)// if previous direction is negative x axis\r\n                          x_cord[beats-1]+=10;\r\n                          else    //if previous direction is positive x axis\r\n                          x_cord[beats-1]-=10;\r\n                          \r\n                          changedirection=false\r\n                          previous_direction=2;\r\n                            }\r\n                        \r\n                      for (let index = 0; index < beats; index++) {\r\n                        if(index==beats-1){\r\n                          \r\n                      y_cord[beats-1]-=speed;\r\n                      \r\n                        }\r\n                        else if(index+1==beats-1){\r\n                          \r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1]+10;\r\n                            \r\n                        }\r\n              \r\n                        else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                            \r\n                      }\r\n                \r\n                      }\r\n                        \r\n\r\n                      changedirection=false;\r\n\r\n\r\n                        break;\r\n\r\n                        \r\n           // case 3 is the direcion in the left\r\n                        case 3:\r\n                          \r\n\r\n                          \r\n                if(changedirection){ // if direction is changed from previous direction\r\n                  x_cord[beats-1]-=10;\r\n                  if(previous_direction==2)// if previous direction is posiive y axis\r\n                  y_cord[beats-1]+=10;\r\n                  else //if previous direction is negative y axis\r\n                  y_cord[beats-1]-=10;\r\n                  \r\n                  changedirection=false;\r\n                  previous_direction=3;\r\n                    }\r\n                      for (let index = 0; index < beats; index++) {\r\n                      if(index==beats-1){\r\n                        \r\n                      x_cord[beats-1]-=speed;\r\n                      }\r\n                      else if(index==beats-2){\r\n                        \r\n                        x_cord[index]=x_cord[index+1]+10;\r\n                        y_cord[index]=y_cord[index+1];\r\n                            \r\n                      }\r\n\r\n                      else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                          \r\n                      }\r\n              \r\n                      }\r\n                        \r\n                      changedirection=false;\r\n                      break;\r\n\r\n           // case 4 is the direcion in the downwards\r\n                      case 4:\r\n                        if(changedirection){ // if direction is changed from previous direction\r\n                          y_cord[beats-1]+=10;\r\n                          \r\n                        if(previous_direction==3)// if previous direction is negative x axis\r\n                          x_cord[beats-1]+=10;\r\n                          else // if previous direction is posiive x axis\r\n                          x_cord[beats-1]-=10;\r\n                          \r\n                          changedirection=false\r\n                          previous_direction=4;\r\n                            }\r\n                        \r\n                      for (let index = 0; index < beats; index++) {\r\n                        if(index==beats-1){\r\n                          \r\n                      y_cord[beats-1]+=speed;\r\n                      \r\n                        }\r\n                        else if(index+1==beats-1){\r\n                          \r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1]-10;\r\n                            \r\n                        }\r\n              \r\n                        else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                            \r\n                      }\r\n                \r\n                      }\r\n                        \r\n\r\n                      changedirection=false;\r\n                      break;\r\n\r\n\r\n                  \r\n                    default:\r\n                      break;\r\n                  }\r\n                }\r\n                \r\n    // if collided with canvas walls print message\r\n                else if (collide){\r\n                  p5.textSize(26);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Oops, Try again',window.innerWidth*0.6/2,70)\r\n                  p5.textAlign(p5.LEFT,p5.TOP);\r\n                  \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Retry ↻',20,20)\r\n                }\r\n                \r\n    // if get the wrong answer\r\n                else if(!answer){\r\n                  p5.textSize(26);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Wrong answer ✘',window.innerWidth*0.6/2,70)\r\n                  p5.textAlign(p5.LEFT,p5.TOP);\r\n                  \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Retry ↻',20,20)\r\n                }\r\n                \r\n    // if no answer remains\r\n                else if(!answers_remainig){\r\n                  p5.textSize(26);\r\n                  p5.fill(0,153,0);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('You Won ✓',window.innerWidth*0.6/2,70)\r\n                }\r\n  } \r\n\r\n  const getMouseClick=(p5)=>{\r\n    let mouse_x;\r\n    let mouse_y;\r\n    \r\n    //  get the mouse axis\r\n    if(p5.mouseIsPressed==true){\r\n        mouse_x=p5.mouseX;        \r\n        mouse_y=p5.mouseY;\r\n    }\r\n    \r\n    // if pressed on retry or play again\r\n    if((!answer||collide)&&mouse_x>20&&mouse_y>20&&mouse_x<100&&mouse_y<40)\r\n    {\r\n      for (let i = 0; i < 10; i++) {\r\n         \r\n         food[i]. x_cord=p5.floor(p5.random(10, (window.innerWidth *0.6) / 10)) * 10\r\n         food[i]. y_cord=p5.floor(p5.random(10, (window.innerHeight *0.75) / 10)) * 10\r\n         food[i]. number=p5.floor(p5.random(10, 99)) \r\n         \r\n        \r\n      }\r\n      collide=false\r\n      answer=true\r\n      \r\n      //reset the original direction and position\r\n\t  x_start = 200;\r\n\t  y_start = 200;\r\n    direction=1\r\n    for (let i = beats; i > 0; i--) {\r\n      if(i==1)\r\n      x_cord[i]=(x_start+10)\r\n      else\r\n     x_cord[i]=(x_start-i);\r\n     y_cord[i]=(y_start)\r\n      \r\n    }\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  const keyPressed=(p5)=> {\r\n    \r\n    // check which key is pressed\r\n    if (p5.keyCode === p5.LEFT_ARROW) {\r\n      if(direction!==1&&direction!==3){\r\n      direction=3;\r\n      changedirection=true;}\r\n    } else  if (p5.keyCode === p5.RIGHT_ARROW) \r\n      {\r\n        if(direction!==3&&direction!==1){\r\n        direction=1;\r\n        \r\n      changedirection=true;}\r\n    }\r\n    else  if (p5.keyCode === p5.UP_ARROW) \r\n      {\r\n        if(direction!==4&&direction!==2){ \r\n        direction=2;\r\n      \r\n        changedirection=true;  \r\n      }\r\n      \r\n    }\r\n    else  if (p5.keyCode === p5.DOWN_ARROW) \r\n      {\r\n        if(direction!==2&&direction!==4){\r\n        direction=4;\r\n        \r\n      changedirection=true;\r\n      }\r\n    }\r\n  }\r\n\r\n\treturn  <Sketch setup={setup} \r\n  draw={draw} \r\n  keyPressed={keyPressed} \r\n  style={\r\n    {\r\n      justifyContent:'center',\r\n      alignItems:'center',\r\n      alignContent:'center',\r\n      backgroundColor:'#FFF1D0',\r\n    }\r\n  }\r\n  />;\r\n};"]},"metadata":{},"sourceType":"module"}