{"ast":null,"code":"import{getQueriesForElement}from\"@testing-library/react\";import React from\"react\";import Sketch from\"react-p5\";// Coordinates from where the snake starts\nimport{jsx as _jsx}from\"react/jsx-runtime\";var x_start=200;var y_start=200;// x and y cordinates array of the beads of snake \nvar x_cord=[];var y_cord=[];// total beads of snake\nvar beats=100;// Direction of snake \n//  1==>right\n// 2==> upwards\n// 3==>left\n// 4==>Down\nvar direction=1;var speed=1;//speed of snake\nvar changedirection=false;// for changing the direction\nvar previous_direction=2;var collide=false;//if snake collides with the outer walls\nvar food=[];// food array \nvar answer=true;var answers_remainig=true;var start=true;export default(function(props){var setup=function setup(p5,canvasParentRef){// use parent to render the canvas in this ref\n// (without that p5 will render the canvas outside of your component)\np5.createCanvas(window.innerWidth*0.6,window.innerHeight*0.75).parent(canvasParentRef);};var draw=function draw(p5){if(start){setupstart(p5);///Runs only first time\n}p5.background(255,241,208);update_snake(p5);//moves the snake \nupdate_direction(p5);// updates the direction if changed\ncheck_collider();//checks if snakes collide\nquestions_and_answers(p5);//dispaly the questions ans answrs\ngetMouseClick(p5);/// get the mouse click on the retry\n};var setupstart=function setupstart(p5){// First times push the food array with cordinates and the number \nfor(var i=beats;i>0;i--){if(i==1)x_cord.push(x_start+10);else x_cord.push(x_start-i);y_cord.push(y_start);}for(var _i=0;_i<10;_i++){food.push({'x_cord':p5.floor(p5.random(10,window.innerWidth*0.6/10))*10,'y_cord':p5.floor(p5.random(10,window.innerHeight*0.75/10))*10,'number':p5.floor(p5.random(10,99))});}start=false;};var check_collider=function check_collider(){var snake_head_x=x_cord[beats-1];var snake_head_y=y_cord[beats-1];//// Check if the snake collide with the canvas walls\nif(snake_head_x<0||snake_head_x>window.innerWidth*0.60||snake_head_y<0||snake_head_y>window.innerHeight*0.75){collide=true;}food.forEach(function(element){if(snake_head_x>element.x_cord-15&&snake_head_x<element.x_cord+15&&snake_head_y>element.y_cord-15&&snake_head_y<element.y_cord+15){// logic to get the maximum number\nvar max=0;food.forEach(function(xelement){if(max<xelement.number)max=xelement.number;});// check if the snake get the right answer food\nif(element.number!=max)answer=false;else{// const index = food.indexOf(element);\n// if (index > -1) {\n//   food.splice(index, 1);\n// }\n// if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\n// and appears as the snake eated it \nelement.x_cord=-11;element.y_cord=-11;element.number=0;answers_remainig=false;}}else{}});};var questions_and_answers=function questions_and_answers(p5){// Display the questions \np5.textSize(26);p5.fill(0,102,153);p5.textAlign(p5.CENTER,p5.TOP);p5.textFont('Cursive');p5.text('Task :: Let the snake eat the numbers in \\n Descending order ',window.innerWidth*0.6/2,10);// display all the numbers on the food present in the array \nfor(var i=0;i<food.length;i++){p5.fill(255,128,0);p5.circle(food[i].x_cord,food[i].y_cord,30,30);p5.textSize(20);p5.fill(0,102,153);p5.textAlign(p5.CENTER,p5.CENTER);p5.text(food[i].number,food[i].x_cord,food[i].y_cord);}food.forEach(function(element){// check if the answer is remaining\nif(element.number>0)answers_remainig=true;});};var update_snake=function update_snake(p5){//p5.noStroke();        \n/// Updates the snake position \np5.fill(157,0,0);for(var index=0;index<beats;index++){p5.circle(x_cord[index],y_cord[index],10,10);}};var update_direction=function update_direction(p5){// if the snake present in the canvas and there's answer present there\nif(!collide&&answer&&answers_remainig){switch(direction){// case 1 is the direcion in the right\ncase 1:{if(changedirection){// if direction is changed from previous direction\nx_cord[beats-1]+=10;if(previous_direction==2)// if previous direction is positive y axis\ny_cord[beats-1]+=10;else// if previous Direction is negative y axis\ny_cord[beats-1]-=10;changedirection=false;previous_direction=1;}for(var index=0;index<beats;index++){if(index==beats-1){x_cord[beats-1]+=speed;}else if(index==beats-2){x_cord[index]=x_cord[index+1]-10;y_cord[index]=y_cord[index+1];}else{x_cord[index]=x_cord[index+1];y_cord[index]=y_cord[index+1];}}changedirection=false;}break;// case 2 is the direcion in the upwards\ncase 2:if(changedirection){// if direction is changed from previous direction\ny_cord[beats-1]-=10;if(previous_direction==3)// if previous direction is negative x axis\nx_cord[beats-1]+=10;else//if previous direction is positive x axis\nx_cord[beats-1]-=10;changedirection=false;previous_direction=2;}for(var _index=0;_index<beats;_index++){if(_index==beats-1){y_cord[beats-1]-=speed;}else if(_index+1==beats-1){x_cord[_index]=x_cord[_index+1];y_cord[_index]=y_cord[_index+1]+10;}else{x_cord[_index]=x_cord[_index+1];y_cord[_index]=y_cord[_index+1];}}changedirection=false;break;// case 3 is the direcion in the left\ncase 3:if(changedirection){// if direction is changed from previous direction\nx_cord[beats-1]-=10;if(previous_direction==2)// if previous direction is posiive y axis\ny_cord[beats-1]+=10;else//if previous direction is negative y axis\ny_cord[beats-1]-=10;changedirection=false;previous_direction=3;}for(var _index2=0;_index2<beats;_index2++){if(_index2==beats-1){x_cord[beats-1]-=speed;}else if(_index2==beats-2){x_cord[_index2]=x_cord[_index2+1]+10;y_cord[_index2]=y_cord[_index2+1];}else{x_cord[_index2]=x_cord[_index2+1];y_cord[_index2]=y_cord[_index2+1];}}changedirection=false;break;// case 4 is the direcion in the downwards\ncase 4:if(changedirection){// if direction is changed from previous direction\ny_cord[beats-1]+=10;if(previous_direction==3)// if previous direction is negative x axis\nx_cord[beats-1]+=10;else// if previous direction is posiive x axis\nx_cord[beats-1]-=10;changedirection=false;previous_direction=4;}for(var _index3=0;_index3<beats;_index3++){if(_index3==beats-1){y_cord[beats-1]+=speed;}else if(_index3+1==beats-1){x_cord[_index3]=x_cord[_index3+1];y_cord[_index3]=y_cord[_index3+1]-10;}else{x_cord[_index3]=x_cord[_index3+1];y_cord[_index3]=y_cord[_index3+1];}}changedirection=false;break;default:break;}}// if collided with canvas walls print message\nelse if(collide){p5.textSize(26);p5.textAlign(p5.CENTER,p5.TOP);p5.textFont('Cursive');p5.text('Oops, Try again',window.innerWidth*0.6/2,70);p5.textAlign(p5.LEFT,p5.TOP);p5.textFont('Cursive');p5.text('Retry ↻',20,20);}// if get the wrong answer\nelse if(!answer){p5.textSize(26);p5.textAlign(p5.CENTER,p5.TOP);p5.textFont('Cursive');p5.text('Wrong answer ✘',window.innerWidth*0.6/2,70);p5.textAlign(p5.LEFT,p5.TOP);p5.textFont('Cursive');p5.text('Retry ↻',20,20);}// if no answer remains\nelse if(!answers_remainig){p5.textSize(26);p5.fill(0,153,0);p5.textAlign(p5.CENTER,p5.TOP);p5.textFont('Cursive');p5.text('You Won ✓',window.innerWidth*0.6/2,70);}};var getMouseClick=function getMouseClick(p5){var mouse_x;var mouse_y;//  get the mouse axis\nif(p5.mouseIsPressed==true){mouse_x=p5.mouseX;mouse_y=p5.mouseY;}// if pressed on retry or play again\nif((!answer||collide)&&mouse_x>20&&mouse_y>20&&mouse_x<100&&mouse_y<40){for(var i=0;i<10;i++){food[i].x_cord=p5.floor(p5.random(10,window.innerWidth*0.6/10))*10;food[i].y_cord=p5.floor(p5.random(10,window.innerHeight*0.75/10))*10;food[i].number=p5.floor(p5.random(10,99));}collide=false;answer=true;//reset the original direction and position\nx_start=200;y_start=200;direction=1;for(var _i2=beats;_i2>0;_i2--){if(_i2==1)x_cord[_i2]=x_start+10;else x_cord[_i2]=x_start-_i2;y_cord[_i2]=y_start;}}};var keyPressed=function keyPressed(p5){// check which key is pressed\nif(p5.keyCode===p5.LEFT_ARROW){if(direction!==1&&direction!==3){direction=3;changedirection=true;}}else if(p5.keyCode===p5.RIGHT_ARROW){if(direction!==3&&direction!==1){direction=1;changedirection=true;}}else if(p5.keyCode===p5.UP_ARROW){if(direction!==4&&direction!==2){direction=2;changedirection=true;}}else if(p5.keyCode===p5.DOWN_ARROW){if(direction!==2&&direction!==4){direction=4;changedirection=true;}}};return/*#__PURE__*/_jsx(Sketch,{setup:setup,draw:draw,keyPressed:keyPressed,style:{justifyContent:'center',alignItems:'center',alignContent:'center',backgroundColor:'#FFF1D0'}});});","map":{"version":3,"sources":["/Users/user/Desktop/funmath-frontend/src/games/game7.js"],"names":["getQueriesForElement","React","Sketch","x_start","y_start","x_cord","y_cord","beats","direction","speed","changedirection","previous_direction","collide","food","answer","answers_remainig","start","props","setup","p5","canvasParentRef","createCanvas","window","innerWidth","innerHeight","parent","draw","setupstart","background","update_snake","update_direction","check_collider","questions_and_answers","getMouseClick","i","push","floor","random","snake_head_x","snake_head_y","forEach","element","max","xelement","number","textSize","fill","textAlign","CENTER","TOP","textFont","text","length","circle","index","LEFT","mouse_x","mouse_y","mouseIsPressed","mouseX","mouseY","keyPressed","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","justifyContent","alignItems","alignContent","backgroundColor"],"mappings":"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","sourcesContent":["import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n// Coordinates from where the snake starts\r\nlet x_start = 200;\r\nlet y_start = 200;\r\n// x and y cordinates array of the beads of snake \r\nlet x_cord = [];\r\nlet y_cord = [];\r\n// total beads of snake\r\nlet beats = 100;\r\n// Direction of snake \r\n//  1==>right\r\n// 2==> upwards\r\n// 3==>left\r\n// 4==>Down\r\nlet direction = 1;\r\nlet speed = 1;  //speed of snake\r\nlet changedirection = false;  // for changing the direction\r\nlet previous_direction = 2;\r\nlet collide = false;   //if snake collides with the outer walls\r\nlet food = [] // food array \r\nlet answer = true\r\nlet answers_remainig = true\r\nlet start = true\r\n\r\nexport default (props) => {\r\n \r\n  \r\n\tconst setup = (p5, canvasParentRef) => {\r\n\t\t// use parent to render the canvas in this ref\r\n\t\t// (without that p5 will render the canvas outside of your component)\r\n     p5.createCanvas(window.innerWidth*0.6, window.innerHeight*0.75).parent(canvasParentRef)\r\n\r\n   \r\n\t};\r\n\r\n\tconst draw = (p5) => {\r\n\r\n    \r\n    if(start){\r\n      setupstart(p5) ///Runs only first time\r\n    }\r\n\t\tp5.background(255,241,208);\r\n    \r\n\r\n    update_snake(p5);//moves the snake \r\n    update_direction(p5);   // updates the direction if changed\r\n    check_collider(); //checks if snakes collide\r\n    questions_and_answers(p5);//dispaly the questions ans answrs\r\n\r\n  \r\n    getMouseClick(p5)/// get the mouse click on the retry\r\n    \r\n    \r\n\t};\r\n\r\n  const setupstart=(p5)=>{\r\n\r\n// First times push the food array with cordinates and the number \r\n    for (let i = beats; i > 0; i--) {\r\n      if(i==1)\r\n      x_cord.push(x_start+10)\r\n      else\r\n     x_cord.push(x_start-i);\r\n     y_cord.push(y_start)\r\n      \r\n    }\r\n     for (let i = 0; i < 10; i++) {\r\n       food.push({\r\n         'x_cord':p5.floor(p5.random(10, (window.innerWidth*0.6 ) / 10)) * 10,\r\n         'y_cord':p5.floor(p5.random(10, (window.innerHeight*0.75 ) / 10)) * 10,\r\n         'number':p5.floor(p5.random(10, 99)) ,\r\n       })\r\n       \r\n     }\r\n     start=false\r\n  }\r\n\r\n  const check_collider=()=>{\r\n    let snake_head_x=x_cord[beats-1];\r\n    let snake_head_y=y_cord[beats-1];\r\n\r\n\r\n//// Check if the snake collide with the canvas walls\r\n      if(snake_head_x<0||snake_head_x>window.innerWidth*0.60||snake_head_y<0||snake_head_y>window.innerHeight*0.75){\r\n        collide=true\r\n      }\r\n\r\n     \r\n      food.forEach(element => {\r\n        if ((snake_head_x>element.x_cord-15&&snake_head_x<element.x_cord+15)&&(snake_head_y>element.y_cord-15&&snake_head_y<element.y_cord+15)) {\r\n          \r\n        // logic to get the maximum number\r\n            let max=0;\r\n            food.forEach(xelement => {\r\n               if(max<xelement.number)\r\n                max= xelement.number\r\n            });\r\n            \r\n        // check if the snake get the right answer food\r\n          if(element.number!=max)\r\n          answer=false\r\n          else{\r\n                        \r\n            // const index = food.indexOf(element);\r\n            // if (index > -1) {\r\n            //   food.splice(index, 1);\r\n            // }\r\n\r\n          // if the answer is right moves the food into the thirs axis tha will not be displayed on the screen\r\n          // and appears as the snake eated it \r\n\r\n            element.x_cord=-11\r\n            element.y_cord=-11\r\n            element.number=0;\r\n            answers_remainig=false;\r\n            \r\n          }\r\n        } else {\r\n          \r\n        }\r\n      });\r\n\r\n \r\n      \r\n\r\n\r\n  }\r\n\r\n  const questions_and_answers=(p5)=>{\r\n    \r\n    // Display the questions \r\n    p5.textSize(26);\r\n    p5.fill(0, 102, 153);\r\n    p5.textAlign(p5.CENTER,p5.TOP);\r\n    \r\n   p5 .textFont('Cursive')\r\n    p5.text('Task :: Let the snake eat the numbers in \\n Descending order ', (window.innerWidth*0.6)/2, 10);\r\n    \r\n    // display all the numbers on the food present in the array \r\n    for (let i = 0; i < food.length; i++) {\r\n           \r\n    p5.fill(255,128,0);\r\n    p5.circle(food[i].x_cord, food[i].y_cord, 30, 30);\r\n    p5.textSize(20);\r\n    p5.fill(0, 102, 153)\r\n    \r\n    p5.textAlign(p5.CENTER,p5.CENTER);\r\n    p5.text(food[i].number,food[i].x_cord,food[i].y_cord)\r\n\r\n    }\r\n\r\n\r\n        food.forEach(element => {\r\n          // check if the answer is remaining\r\n            if(element.number>0)\r\n            answers_remainig=true\r\n\r\n             \r\n        });\r\n    \r\n  }\r\n \r\n  const update_snake=(p5)=>{\r\n    //p5.noStroke();        \r\n    \r\n    /// Updates the snake position \r\n    p5.fill(157,0,0);\r\n    for (let index = 0; index <beats; index++) {\r\n         p5.circle(x_cord[index], y_cord[index], 10, 10); \r\n    }\r\n  }\r\n  const update_direction=(p5)=>{\r\n\r\n    // if the snake present in the canvas and there's answer present there\r\n        if(!collide&&answer&&answers_remainig){ \r\n                  switch (direction) {\r\n                    \r\n        // case 1 is the direcion in the right\r\n                    case 1:\r\n                  {  \r\n                if(changedirection){  // if direction is changed from previous direction\r\n                  x_cord[beats-1]+=10;\r\n                  if(previous_direction==2) // if previous direction is positive y axis\r\n                  y_cord[beats-1]+=10;\r\n                  else    // if previous Direction is negative y axis\r\n                  y_cord[beats-1]-=10;\r\n                  \r\n                  changedirection=false;\r\n                  previous_direction=1;\r\n                    }\r\n                      for (let index = 0; index < beats; index++) {\r\n                      if(index==beats-1){\r\n                        \r\n                      x_cord[beats-1]+=speed;\r\n                      }\r\n                      else if(index==beats-2){\r\n                        \r\n                        x_cord[index]=x_cord[index+1]-10;\r\n                        y_cord[index]=y_cord[index+1];\r\n                            \r\n                      }\r\n\r\n                      else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                          \r\n                      }\r\n              \r\n                      }\r\n                        \r\n                    \r\n                      \r\n                      changedirection=false;\r\n                  }\r\n                      break;\r\n\r\n // case 2 is the direcion in the upwards\r\n                      case 2:\r\n                    \r\n                        if(changedirection){ // if direction is changed from previous direction\r\n                          y_cord[beats-1]-=10;\r\n                          if(previous_direction==3)// if previous direction is negative x axis\r\n                          x_cord[beats-1]+=10;\r\n                          else    //if previous direction is positive x axis\r\n                          x_cord[beats-1]-=10;\r\n                          \r\n                          changedirection=false\r\n                          previous_direction=2;\r\n                            }\r\n                        \r\n                      for (let index = 0; index < beats; index++) {\r\n                        if(index==beats-1){\r\n                          \r\n                      y_cord[beats-1]-=speed;\r\n                      \r\n                        }\r\n                        else if(index+1==beats-1){\r\n                          \r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1]+10;\r\n                            \r\n                        }\r\n              \r\n                        else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                            \r\n                      }\r\n                \r\n                      }\r\n                        \r\n\r\n                      changedirection=false;\r\n\r\n\r\n                        break;\r\n\r\n                        \r\n           // case 3 is the direcion in the left\r\n                        case 3:\r\n                          \r\n\r\n                          \r\n                if(changedirection){ // if direction is changed from previous direction\r\n                  x_cord[beats-1]-=10;\r\n                  if(previous_direction==2)// if previous direction is posiive y axis\r\n                  y_cord[beats-1]+=10;\r\n                  else //if previous direction is negative y axis\r\n                  y_cord[beats-1]-=10;\r\n                  \r\n                  changedirection=false;\r\n                  previous_direction=3;\r\n                    }\r\n                      for (let index = 0; index < beats; index++) {\r\n                      if(index==beats-1){\r\n                        \r\n                      x_cord[beats-1]-=speed;\r\n                      }\r\n                      else if(index==beats-2){\r\n                        \r\n                        x_cord[index]=x_cord[index+1]+10;\r\n                        y_cord[index]=y_cord[index+1];\r\n                            \r\n                      }\r\n\r\n                      else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                          \r\n                      }\r\n              \r\n                      }\r\n                        \r\n                      changedirection=false;\r\n                      break;\r\n\r\n           // case 4 is the direcion in the downwards\r\n                      case 4:\r\n                        if(changedirection){ // if direction is changed from previous direction\r\n                          y_cord[beats-1]+=10;\r\n                          \r\n                        if(previous_direction==3)// if previous direction is negative x axis\r\n                          x_cord[beats-1]+=10;\r\n                          else // if previous direction is posiive x axis\r\n                          x_cord[beats-1]-=10;\r\n                          \r\n                          changedirection=false\r\n                          previous_direction=4;\r\n                            }\r\n                        \r\n                      for (let index = 0; index < beats; index++) {\r\n                        if(index==beats-1){\r\n                          \r\n                      y_cord[beats-1]+=speed;\r\n                      \r\n                        }\r\n                        else if(index+1==beats-1){\r\n                          \r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1]-10;\r\n                            \r\n                        }\r\n              \r\n                        else{\r\n                        x_cord[index]=x_cord[index+1];\r\n                        y_cord[index]=y_cord[index+1];\r\n                                            \r\n                      }\r\n                \r\n                      }\r\n                        \r\n\r\n                      changedirection=false;\r\n                      break;\r\n\r\n\r\n                  \r\n                    default:\r\n                      break;\r\n                  }\r\n                }\r\n                \r\n    // if collided with canvas walls print message\r\n                else if (collide){\r\n                  p5.textSize(26);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Oops, Try again',window.innerWidth*0.6/2,70)\r\n                  p5.textAlign(p5.LEFT,p5.TOP);\r\n                  \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Retry ↻',20,20)\r\n                }\r\n                \r\n    // if get the wrong answer\r\n                else if(!answer){\r\n                  p5.textSize(26);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Wrong answer ✘',window.innerWidth*0.6/2,70)\r\n                  p5.textAlign(p5.LEFT,p5.TOP);\r\n                  \r\n   p5 .textFont('Cursive')\r\n                  p5.text('Retry ↻',20,20)\r\n                }\r\n                \r\n    // if no answer remains\r\n                else if(!answers_remainig){\r\n                  p5.textSize(26);\r\n                  p5.fill(0,153,0);\r\n                  \r\n                 p5.textAlign(p5.CENTER,p5.TOP);\r\n                 \r\n   p5 .textFont('Cursive')\r\n                  p5.text('You Won ✓',window.innerWidth*0.6/2,70)\r\n                }\r\n  } \r\n\r\n  const getMouseClick=(p5)=>{\r\n    let mouse_x;\r\n    let mouse_y;\r\n    \r\n    //  get the mouse axis\r\n    if(p5.mouseIsPressed==true){\r\n        mouse_x=p5.mouseX;        \r\n        mouse_y=p5.mouseY;\r\n    }\r\n    \r\n    // if pressed on retry or play again\r\n    if((!answer||collide)&&mouse_x>20&&mouse_y>20&&mouse_x<100&&mouse_y<40)\r\n    {\r\n      for (let i = 0; i < 10; i++) {\r\n         \r\n         food[i]. x_cord=p5.floor(p5.random(10, (window.innerWidth *0.6) / 10)) * 10\r\n         food[i]. y_cord=p5.floor(p5.random(10, (window.innerHeight *0.75) / 10)) * 10\r\n         food[i]. number=p5.floor(p5.random(10, 99)) \r\n         \r\n        \r\n      }\r\n      collide=false\r\n      answer=true\r\n      \r\n      //reset the original direction and position\r\n\t  x_start = 200;\r\n\t  y_start = 200;\r\n    direction=1\r\n    for (let i = beats; i > 0; i--) {\r\n      if(i==1)\r\n      x_cord[i]=(x_start+10)\r\n      else\r\n     x_cord[i]=(x_start-i);\r\n     y_cord[i]=(y_start)\r\n      \r\n    }\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  const keyPressed=(p5)=> {\r\n    \r\n    // check which key is pressed\r\n    if (p5.keyCode === p5.LEFT_ARROW) {\r\n      if(direction!==1&&direction!==3){\r\n      direction=3;\r\n      changedirection=true;}\r\n    } else  if (p5.keyCode === p5.RIGHT_ARROW) \r\n      {\r\n        if(direction!==3&&direction!==1){\r\n        direction=1;\r\n        \r\n      changedirection=true;}\r\n    }\r\n    else  if (p5.keyCode === p5.UP_ARROW) \r\n      {\r\n        if(direction!==4&&direction!==2){ \r\n        direction=2;\r\n      \r\n        changedirection=true;  \r\n      }\r\n      \r\n    }\r\n    else  if (p5.keyCode === p5.DOWN_ARROW) \r\n      {\r\n        if(direction!==2&&direction!==4){\r\n        direction=4;\r\n        \r\n      changedirection=true;\r\n      }\r\n    }\r\n  }\r\n\r\n\treturn  <Sketch setup={setup} \r\n  draw={draw} \r\n  keyPressed={keyPressed} \r\n  style={\r\n    {\r\n      justifyContent:'center',\r\n      alignItems:'center',\r\n      alignContent:'center',\r\n      backgroundColor:'#FFF1D0',\r\n    }\r\n  }\r\n  />;\r\n};"]},"metadata":{},"sourceType":"module"}