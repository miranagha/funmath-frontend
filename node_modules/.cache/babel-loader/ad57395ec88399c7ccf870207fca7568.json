{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/funmath/funmath/src/games/game6.js\";\nimport { getQueriesForElement } from \"@testing-library/react\";\nimport React from \"react\";\nimport Sketch from \"react-p5\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet shape = []; //shapes array contain multiple shapes\n\nlet speed = 1; // speed from which they comes down\n\nlet score = 0;\nlet answer = true; // if previous answer is true\n\nlet ques_shape = 1; // correct answer shape\n\nlet change_ques = false; // to change the question\n\nlet next_shapes = false; // setup the next shape\n\nlet dropped = false; // if correct shape is dropped\n\nlet start = true;\nexport default (props => {\n  const setup = (p5, canvasParentRef) => {\n    // use parent to render the canvas in this ref\n    // (without that p5 will render the canvas outside of your component)\n    p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef);\n  };\n\n  const draw = p5 => {\n    if (start) {\n      setupstart(p5); // runs only first time\n    }\n\n    p5.background(255, 241, 208);\n    shapes(p5); // display the shapes \n\n    getMouseClick(p5); // get the mouse tap\n\n    questions_and_answers(p5); //display the shapes\n\n    moveShapes(p5); // move the shapes\n  };\n\n  const setupstart = p5 => {\n    // runs only first time\n    // assign the shapes in the shape array with their position coordinates\n    for (let i = 1; i <= 3; i++) {\n      shape.push({\n        'x_cord': i === 1 ? window.innerWidth * 0.1 : i === 2 ? window.innerWidth * 0.3 : window.innerWidth * 0.5,\n        'y_cord': 10,\n        'shape': p5.floor(p5.random(1, 7))\n      });\n    } //correct answer shape\n\n\n    ques_shape = p5.floor(p5.random(1, 7)); //adding the correct shape in the options\n\n    let ans = p5.floor(p5.random(1, 4));\n\n    for (let i = 0; i < 3; i++) {\n      if (i === ans - 1) shape[i].shape = ques_shape;\n    }\n\n    start = false;\n  };\n\n  const questions_and_answers = p5 => {\n    let shape_name; // if question is changes or selcted the right answer\n\n    if (change_ques && next_shapes) {\n      ques_shape = p5.floor(p5.random(1, 7));\n      let ans = p5.floor(p5.random(1, 4)); //asign shapes to the option\n\n      for (let i = 0; i < 3; i++) {\n        if (shape[i]) {\n          if (i === 0) shape[i].x_cord = window.innerWidth * 0.1;else if (i === 1) shape[i].x_cord = window.innerWidth * 0.3;else shape[i].x_cord = window.innerWidth * 0.5;\n          shape[i].y_cord = 10;\n          shape[i].shape = p5.floor(p5.random(1, 7));\n        } //            adding new option if right answer is tapped and removed\n        else {\n            shape.push({\n              'x_cord': i === 0 ? window.innerWidth * 0.1 : i === 1 ? window.innerWidth * 0.3 : window.innerWidth * 0.5,\n              'y_cord': 10,\n              'shape': p5.floor(p5.random(1, 7))\n            });\n          }\n\n        if (i === ans - 1) shape[i].shape = ques_shape;\n      }\n\n      change_ques = false;\n      next_shapes = true;\n    } // questions shapes with reference to their assign number\n\n\n    switch (ques_shape) {\n      case 1:\n        shape_name = 'Triangle';\n        break;\n\n      case 2:\n        shape_name = 'Half Circle';\n        break;\n\n      case 3:\n        shape_name = 'Square';\n        break;\n\n      case 4:\n        shape_name = 'Rectangle';\n        break;\n\n      case 5:\n        shape_name = 'Circle';\n        break;\n\n      case 6:\n        shape_name = 'Ellipse';\n        break;\n\n      default:\n        break;\n    }\n\n    p5.noStroke();\n    p5.fill(255, 241, 208);\n    p5.rect(0, 0, window.innerWidth, 60); // Display the question\n\n    p5.textSize(26);\n    p5.fill(0, 102, 153);\n    p5.textAlign(p5.CENTER, p5.TOP);\n    p5.textFont('Cursive');\n    p5.text('Task :: Tap the ' + shape_name + ' shape', window.innerWidth * 0.6 / 2, 20); // Display the score\n\n    p5.fill('#C22A85');\n    p5.textAlign(p5.RIGHT, p5.TOP);\n    p5.textFont('Cursive');\n    p5.text('Score : ' + score + '   ', window.innerWidth * 0.6, 20);\n  };\n\n  const moveShapes = p5 => {\n    // if previous answer is true and the shape is not dropped\n    if (answer && !dropped) {\n      shape.forEach(element => {\n        //            moves the y axis of the all shapes \n        element.y_cord += speed;\n\n        if (element.y_cord > window.innerHeight) {\n          //if shapes goes in the bottom of the canvas\n          if (ques_shape === element.shape) {\n            //if answer is dropped\n            dropped = true;\n            answer = false;\n            change_ques = true;\n            next_shapes = true;\n          } else {\n            // resetting their position \n            element.y_cord = 0;\n            element.shape = p5.floor(p5.random(1, 7));\n            next_shapes = true;\n          }\n        }\n      });\n    } else if (!answer && dropped == false) {\n      // if the answer is wrong :: Display the wrong msg\n      p5.textSize(26);\n      p5.fill(157, 0, 0);\n      p5.textAlign(p5.CENTER, p5.TOP);\n      p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 70);\n      p5.fill('#C22A85');\n      p5.textAlign(p5.LEFT, p5.TOP);\n      p5.text('Retry ↻', 20, 20);\n    } else if (dropped && !answer) {\n      // If the right answer shape is dropped ::display the msg\n      p5.textSize(26);\n      p5.fill(157, 0, 0);\n      p5.textAlign(p5.CENTER, p5.TOP);\n      p5.textFont('Cursive');\n      p5.text('Oops shape dropped ✘', window.innerWidth * 0.6 / 2, 70);\n      p5.fill('#C22A85');\n      p5.textAlign(p5.LEFT, p5.TOP);\n      p5.textFont('Cursive');\n      p5.text('Retry ↻', 20, 20);\n    }\n  };\n\n  const shapes = p5 => {\n    // Sketch each shape and fill seprate color\n    p5.fill('#222');\n    shape.forEach(elemen => {\n      if (elemen.shape === 1) {\n        //                ---------------*****  Triangle   ****---------------------\n        p5.stroke(1);\n        p5.fill('#686DA7');\n        p5.triangle(elemen.x_cord, elemen.y_cord, elemen.x_cord + 50, elemen.y_cord + 50, elemen.x_cord, elemen.y_cord + 50); // p5.line(elemen.x_cord,elemen.y_cord,elemen.x_cord+50,elemen.y_cord+50);\n        // p5.line(elemen.x_cord,elemen.y_cord,elemen.x_cord,elemen.y_cord+50);\n        // p5.line(elemen.x_cord,elemen.y_cord+50,elemen.x_cord+50,elemen.y_cord+50);\n      } else if (elemen.shape === 2) {\n        //                ---------------*****  half circle   ****---------------------\n        p5.fill('#681346');\n        p5.arc(elemen.x_cord, elemen.y_cord + 25, 50, 50, p5.PI, 0, p5.CHORD);\n      } else if (elemen.shape === 3) {\n        //                ---------------*****  square   ****---------------------\n        p5.fill('#4633FF');\n        p5.rect(elemen.x_cord, elemen.y_cord, 50, 50);\n      } else if (elemen.shape === 4) {\n        //                ---------------*****  rectangle   ****---------------------\n        p5.fill('#FF5733');\n        p5.rect(elemen.x_cord, elemen.y_cord, 80, 50);\n      } else if (elemen.shape === 5) {\n        //                ---------------*****  circle   ****---------------------\n        p5.fill('#33FF36');\n        p5.circle(elemen.x_cord, elemen.y_cord + 25, 50, 50);\n      } else if (elemen.shape === 6) {\n        //                ---------------*****  ellipse   ****---------------------\n        p5.fill('#3396FF');\n        p5.ellipse(elemen.x_cord, elemen.y_cord + 25, 80, 50);\n      }\n    });\n  };\n\n  const getMouseClick = p5 => {\n    // ge the mouse click position\n    let mouse_x;\n    let mouse_y;\n\n    if (p5.mouseIsPressed == true) {\n      mouse_x = p5.mouseX;\n      mouse_y = p5.mouseY;\n    }\n\n    if (answer) {\n      shape.forEach(element => {\n        if (mouse_x > element.x_cord - 25 && mouse_y > element.y_cord - 25) {\n          // if mouse is tapped on the shape \n          switch (element.shape) {\n            case 1:\n              // if the shape is triangle\n              if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\n                if (ques_shape === element.shape) {\n                  // check the ques shape\n                  const index = shape.indexOf(element);\n\n                  if (index > -1) {\n                    shape.splice(index, 1); // remove frrom the display\n                  }\n\n                  score++;\n                  change_ques = true;\n                } else {\n                  answer = false;\n                }\n              } else {}\n\n              break;\n\n            case 2:\n              /// if the shape is half circle\n              if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\n                if (ques_shape === element.shape) {\n                  const index = shape.indexOf(element);\n\n                  if (index > -1) {\n                    shape.splice(index, 1);\n                  }\n\n                  score++;\n                  change_ques = true;\n                } else {\n                  answer = false;\n                }\n              } else {}\n\n              break;\n\n            case 3:\n              // if the shape is square\n              if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\n                if (ques_shape === element.shape) {\n                  const index = shape.indexOf(element);\n\n                  if (index > -1) {\n                    shape.splice(index, 1);\n                  }\n\n                  score++;\n                  change_ques = true;\n                } else {\n                  answer = false;\n                }\n              } else {}\n\n              break;\n\n            case 4:\n              // if the shape is rectangle\n              if (p5.mouseX < element.x_cord + 80 && p5.mouseY < element.y_cord + 50) {\n                if (ques_shape === element.shape) {\n                  const index = shape.indexOf(element);\n\n                  if (index > -1) {\n                    shape.splice(index, 1);\n                  }\n\n                  score++;\n                  change_ques = true;\n                } else {\n                  answer = false;\n                }\n              } else {}\n\n              break;\n\n            case 5:\n              // if the shape is circle\n              if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\n                if (ques_shape === element.shape) {\n                  const index = shape.indexOf(element);\n\n                  if (index > -1) {\n                    shape.splice(index, 1);\n                  }\n\n                  score++;\n                  change_ques = true;\n                } else {\n                  answer = false;\n                }\n              } else {}\n\n              break;\n\n            case 6:\n              // if the shape is ellipse\n              if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\n                if (ques_shape === element.shape) {\n                  const index = shape.indexOf(element);\n\n                  if (index > -1) {\n                    shape.splice(index, 1);\n                  }\n\n                  score++;\n                  change_ques = true;\n                } else {\n                  answer = false;\n                }\n              } else {}\n\n              break;\n\n            default:\n              break;\n          }\n        }\n      });\n    } else if (!answer) {\n      // if tapped on retry \n      if (mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\n        answer = true;\n        dropped = false;\n        score = 0;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sketch, {\n    setup: setup,\n    draw: draw,\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      alignContent: 'center'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 12\n  }, this);\n});","map":{"version":3,"sources":["/Users/user/Desktop/funmath/funmath/src/games/game6.js"],"names":["getQueriesForElement","React","Sketch","shape","speed","score","answer","ques_shape","change_ques","next_shapes","dropped","start","props","setup","p5","canvasParentRef","createCanvas","window","innerWidth","innerHeight","parent","draw","setupstart","background","shapes","getMouseClick","questions_and_answers","moveShapes","i","push","floor","random","ans","shape_name","x_cord","y_cord","noStroke","fill","rect","textSize","textAlign","CENTER","TOP","textFont","text","RIGHT","forEach","element","LEFT","elemen","stroke","triangle","arc","PI","CHORD","circle","ellipse","mouse_x","mouse_y","mouseIsPressed","mouseX","mouseY","index","indexOf","splice","justifyContent","alignItems","alignContent"],"mappings":"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","sourcesContent":["import { getQueriesForElement } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nlet shape = []; //shapes array contain multiple shapes\r\nlet speed = 1  // speed from which they comes down\r\nlet score = 0\r\nlet answer = true;  // if previous answer is true\r\nlet ques_shape = 1;   // correct answer shape\r\nlet change_ques = false  // to change the question\r\nlet next_shapes = false;   // setup the next shape\r\nlet dropped = false      // if correct shape is dropped\r\nlet start = true\r\n\r\nexport default (props) => {\r\n\r\n\r\n    const setup = (p5, canvasParentRef) => {\r\n        // use parent to render the canvas in this ref\r\n        // (without that p5 will render the canvas outside of your component)\r\n        p5.createCanvas(window.innerWidth * 0.6, window.innerHeight * 0.75).parent(canvasParentRef)\r\n\r\n    };\r\n\r\n    const draw = (p5) => {\r\n\r\n\r\n\r\n        if (start) {\r\n            setupstart(p5)   // runs only first time\r\n        }\r\n        p5.background(255, 241, 208);\r\n\r\n        shapes(p5)   // display the shapes \r\n        getMouseClick(p5)  // get the mouse tap\r\n        questions_and_answers(p5);  //display the shapes\r\n\r\n        moveShapes(p5)  // move the shapes\r\n    };\r\n\r\n\r\n    const setupstart = (p5) => {\r\n        // runs only first time\r\n\r\n        // assign the shapes in the shape array with their position coordinates\r\n        for (let i = 1; i <= 3; i++) {\r\n            shape.push({\r\n                'x_cord': i === 1 ? window.innerWidth * 0.1 : i === 2 ? window.innerWidth * 0.3 : window.innerWidth * 0.5,\r\n                'y_cord': 10,\r\n                'shape': p5.floor(p5.random(1, 7))\r\n            })\r\n\r\n        }\r\n        //correct answer shape\r\n        ques_shape = p5.floor(p5.random(1, 7))\r\n\r\n        //adding the correct shape in the options\r\n        let ans = p5.floor(p5.random(1, 4))\r\n        for (let i = 0; i < 3; i++) {\r\n            if (i === ans - 1)\r\n                shape[i].shape = ques_shape\r\n        }\r\n        start = false\r\n\r\n    }\r\n    const questions_and_answers = (p5) => {\r\n\r\n        let shape_name;\r\n        // if question is changes or selcted the right answer\r\n        if (change_ques && next_shapes) {\r\n            ques_shape = p5.floor(p5.random(1, 7))\r\n            let ans = p5.floor(p5.random(1, 4))\r\n\r\n            //asign shapes to the option\r\n            for (let i = 0; i < 3; i++) {\r\n                if (shape[i]) {\r\n                    if (i === 0)\r\n                        shape[i].x_cord = window.innerWidth * 0.1;\r\n                    else if (i === 1)\r\n                        shape[i].x_cord = window.innerWidth * 0.3;\r\n                    else\r\n                        shape[i].x_cord = window.innerWidth * 0.5;\r\n\r\n                    shape[i].y_cord = 10;\r\n                    shape[i].shape = p5.floor(p5.random(1, 7));\r\n\r\n                }\r\n                //            adding new option if right answer is tapped and removed\r\n                else {\r\n                    shape.push({\r\n                        'x_cord': i === 0 ? window.innerWidth * 0.1 : i === 1 ? window.innerWidth * 0.3 : window.innerWidth * 0.5,\r\n                        'y_cord': 10,\r\n                        'shape': p5.floor(p5.random(1, 7))\r\n                    })\r\n                }\r\n                if (i === ans - 1)\r\n                    shape[i].shape = ques_shape\r\n            }\r\n\r\n            change_ques = false\r\n            next_shapes = true\r\n        }\r\n        // questions shapes with reference to their assign number\r\n        switch (ques_shape) {\r\n            case 1:\r\n                shape_name = 'Triangle'\r\n                break;\r\n            case 2:\r\n\r\n                shape_name = 'Half Circle'\r\n                break;\r\n            case 3:\r\n\r\n                shape_name = 'Square'\r\n                break;\r\n            case 4:\r\n\r\n                shape_name = 'Rectangle'\r\n                break;\r\n            case 5:\r\n\r\n                shape_name = 'Circle'\r\n                break;\r\n            case 6:\r\n\r\n                shape_name = 'Ellipse'\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        p5.noStroke();\r\n        p5.fill(255, 241, 208)\r\n        p5.rect(0, 0, window.innerWidth, 60)\r\n\r\n        // Display the question\r\n        p5.textSize(26);\r\n        p5.fill(0, 102, 153);\r\n        p5.textAlign(p5.CENTER, p5.TOP);\r\n        \r\n   p5 .textFont('Cursive')\r\n        p5.text('Task :: Tap the ' + shape_name + ' shape', (window.innerWidth * 0.6) / 2, 20);\r\n\r\n\r\n        // Display the score\r\n        p5.fill('#C22A85');\r\n        p5.textAlign(p5.RIGHT, p5.TOP);\r\n        \r\n   p5 .textFont('Cursive')\r\n        p5.text('Score : ' + score + '   ', (window.innerWidth * 0.6), 20);\r\n\r\n\r\n    }\r\n\r\n    const moveShapes = (p5) => {\r\n\r\n        // if previous answer is true and the shape is not dropped\r\n        if (answer && !dropped) {\r\n            shape.forEach(element => {\r\n\r\n\r\n                //            moves the y axis of the all shapes \r\n                element.y_cord += speed\r\n                if (element.y_cord > window.innerHeight) {\r\n                    //if shapes goes in the bottom of the canvas\r\n\r\n                    if (ques_shape === element.shape) {\r\n                        //if answer is dropped\r\n                        dropped = true\r\n                        answer = false\r\n                        change_ques = true\r\n                        next_shapes = true\r\n                    }\r\n                    else {\r\n                        // resetting their position \r\n                        element.y_cord = 0\r\n                        element.shape = p5.floor(p5.random(1, 7))\r\n                        next_shapes = true\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n        else if (!answer && dropped == false) {\r\n            // if the answer is wrong :: Display the wrong msg\r\n            p5.textSize(26);\r\n            p5.fill(157, 0, 0);\r\n            p5.textAlign(p5.CENTER, p5.TOP);\r\n            p5.text('Wrong answer ✘', window.innerWidth * 0.6 / 2, 70)\r\n            p5.fill('#C22A85');\r\n            p5.textAlign(p5.LEFT, p5.TOP);\r\n            p5.text('Retry ↻', 20, 20)\r\n        }\r\n        else if (dropped && !answer) {\r\n            // If the right answer shape is dropped ::display the msg\r\n            p5.textSize(26);\r\n\r\n            p5.fill(157, 0, 0);\r\n            p5.textAlign(p5.CENTER, p5.TOP);\r\n            \r\n   p5 .textFont('Cursive')\r\n            p5.text('Oops shape dropped ✘', window.innerWidth * 0.6 / 2, 70)\r\n            p5.fill('#C22A85');\r\n            p5.textAlign(p5.LEFT, p5.TOP);\r\n            \r\n   p5 .textFont('Cursive')\r\n            p5.text('Retry ↻', 20, 20)\r\n        }\r\n\r\n    }\r\n    const shapes = (p5) => {\r\n\r\n        // Sketch each shape and fill seprate color\r\n        p5.fill('#222')\r\n\r\n        shape.forEach(elemen => {\r\n            if (elemen.shape === 1) {\r\n\r\n                //                ---------------*****  Triangle   ****---------------------\r\n                p5.stroke(1)\r\n                p5.fill('#686DA7')\r\n                p5.triangle(elemen.x_cord, elemen.y_cord, elemen.x_cord + 50, elemen.y_cord + 50, elemen.x_cord, elemen.y_cord + 50)\r\n                // p5.line(elemen.x_cord,elemen.y_cord,elemen.x_cord+50,elemen.y_cord+50);\r\n                // p5.line(elemen.x_cord,elemen.y_cord,elemen.x_cord,elemen.y_cord+50);\r\n                // p5.line(elemen.x_cord,elemen.y_cord+50,elemen.x_cord+50,elemen.y_cord+50);\r\n            }\r\n            else if (elemen.shape === 2) {\r\n\r\n                //                ---------------*****  half circle   ****---------------------\r\n                p5.fill('#681346')\r\n                p5.arc(elemen.x_cord, elemen.y_cord + 25, 50, 50, p5.PI, 0, p5.CHORD);\r\n            }\r\n            else if (elemen.shape === 3) {\r\n\r\n                //                ---------------*****  square   ****---------------------\r\n                p5.fill('#4633FF')\r\n                p5.rect(elemen.x_cord, elemen.y_cord, 50, 50);\r\n            }\r\n            else if (elemen.shape === 4) {\r\n\r\n                //                ---------------*****  rectangle   ****---------------------\r\n                p5.fill('#FF5733')\r\n                p5.rect(elemen.x_cord, elemen.y_cord, 80, 50);\r\n            } else if (elemen.shape === 5) {\r\n                //                ---------------*****  circle   ****---------------------\r\n                p5.fill('#33FF36')\r\n                p5.circle(elemen.x_cord, elemen.y_cord + 25, 50, 50);\r\n            } else if (elemen.shape === 6) {\r\n                //                ---------------*****  ellipse   ****---------------------\r\n                p5.fill('#3396FF')\r\n                p5.ellipse(elemen.x_cord, elemen.y_cord + 25, 80, 50);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const getMouseClick = (p5) => {\r\n        // ge the mouse click position\r\n        let mouse_x;\r\n        let mouse_y;\r\n        if (p5.mouseIsPressed == true) {\r\n            mouse_x = p5.mouseX;\r\n            mouse_y = p5.mouseY;\r\n        }\r\n\r\n        if (answer) {\r\n            shape.forEach(element => {\r\n                if (mouse_x > element.x_cord - 25 && mouse_y > element.y_cord - 25) { // if mouse is tapped on the shape \r\n                    switch (element.shape) {\r\n                        case 1:    // if the shape is triangle\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {// check the ques shape\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);    // remove frrom the display\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 2:   /// if the shape is half circle\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 3:// if the shape is square\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 4:// if the shape is rectangle\r\n                            if (p5.mouseX < element.x_cord + 80 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 5:// if the shape is circle\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n                        case 6:// if the shape is ellipse\r\n                            if (p5.mouseX < element.x_cord + 50 && p5.mouseY < element.y_cord + 50) {\r\n\r\n                                if (ques_shape === element.shape) {\r\n\r\n                                    const index = shape.indexOf(element);\r\n                                    if (index > -1) {\r\n                                        shape.splice(index, 1);\r\n                                    }\r\n                                    score++;\r\n                                    change_ques = true\r\n                                }\r\n                                else {\r\n\r\n                                    answer = false\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n\r\n                            }\r\n\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        else if (!answer) {\r\n            // if tapped on retry \r\n            if (mouse_x > 20 && mouse_y > 20 && mouse_x < 100 && mouse_y < 40) {\r\n                answer = true\r\n                dropped = false\r\n                score = 0\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return <Sketch setup={setup}\r\n        draw={draw}\r\n        style={\r\n            {\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                alignContent: 'center',\r\n\r\n            }\r\n        }\r\n    />;\r\n};"]},"metadata":{},"sourceType":"module"}